{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ingest-sdk.js","webpack:///webpack/bootstrap d96ba7b8a206e8d86759","webpack:///./node_modules/extend/index.js","webpack:///./src/Request.js","webpack:///./src/Utils.js","webpack:///./src/resources/Resource.js","webpack:///./src/constants/resourceTypes.js","webpack:///./node_modules/pinkyswear/pinkyswear.js","webpack:///./node_modules/process/browser.js","webpack:///./src/JWTUtils.js","webpack:///./src/RequestManager.js","webpack:///./src/resources/PlaybackContent.js","webpack:///./src/index.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/Uploader.js","webpack:///./src/resources/Users.js","webpack:///./src/resources/Networks.js","webpack:///./src/resources/Videos.js","webpack:///./src/resources/Jobs.js","webpack:///./src/resources/Profiles.js","webpack:///./src/resources/Inputs.js","webpack:///./src/resources/Events.js","webpack:///./src/resources/Roles.js","webpack:///./src/resources/Livestreams.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","hasOwn","toStr","toString","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","key","extend","options","src","copy","copyIsArray","clone","target","arguments","length","deep","Request","defaults","async","method","ignoreAcceptHeader","requestProgress","request","XMLHttpRequest","setupListeners","maxRetrys","retrys","Promise","JWTUtils","RequestManager","VALID_RESPONSE_CODES","send","promise","url","makeRequest","requestError","then","_sendNextRequest","sendSync","callback","onreadystatechange","readyStateChange","bind","upload","onprogress","progressEvent","postData","preparePostData","data","headers","hasContentType","success","open","setRequestHeader","applyRequestHeaders","token","isExpired","type","addRequest","isValidResponseCode","status","result","FormData","Blob","JSON","stringify","error","keys","keysLength","requestComplete","response","processResponse","errors","responseType","getResponseHeader","indexOf","parse","stack","statusCode","message","Error","getAllResponseHeaders","e","lengthComputable","loaded","total","resp","retryAfterTime","readyState","setTimeout","responseText","responseCode","responseCodeCount","cancel","abort","Utils","parseTokens","template","hash","replace","promisify","state","value","series","promises","paused","promisesCount","all","complete","responses","pause","_seriesPause","undefined","resume","_seriesResume","_seriesCancel","_seriesCallPromise","_seriesComplete","_seriesError","canceled","push","isImage","file","Resource","host","byId","trash","deleteMethods","permanent","search","tokenSource","resource","config","utils","_tokenSource","getAll","getById","id","getTrashed","add","update","delete","_deleteResource","permanentDelete","deleteSync","_deleteResourceSync","permanentDeleteSync","input","encodeURIComponent","searchTrash","count","_handleCountResponse","trashCount","parseInt","EVENTS","INPUTS","JOBS","NETWORKS","PROFILES","ROLES","USERS","VIDEOS","LIVESTREAMS","setImmediate","process","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","apply","isFunction","f","isObject","defer","undef","pinkySwear","values","deferred","set","newState","newValues","onFulfilled","onRejected","promise2","callCallbacks","resolve","x","cbCalled","TypeError","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","nextTick","args","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","parseTokenPayload","payload","parts","split","window","atob","exp","now","Date","getTime","pending","activeRequests","currentSetRequests","lastRequestSetStart","resetTimer","sendNextRequest","_resetCurrentSet","resetCurrentSet","setMaxRequests","maxRequests","newDate","requestData","sendRequest","XRatelimitRemaining","moreRequests","delay","XRatelimitLimit","XRatelimitReset","shift","PlaybackContent","thumbnail","thumbnails","deleteThumbnail","create","getThumbnails","addExternalThumbnails","images","imagesToAdd","uploadThumbnail","image","formData","File","append","thumbnailId","IngestSDK","resourceConfig","setToken","playbackContent","Media","usersResource","Users","networksResource","Networks","videosResource","Videos","jobsResource","Jobs","profilesResource","Profiles","inputsResource","Inputs","uploader","Uploader","eventsResource","Events","rolesResource","Roles","livestreamsResource","Livestreams","requestManager","getToken","videos","inputs","users","networks","profiles","jobs","events","roles","livestreams","max","api","Timeout","clearFn","_id","_clearFn","Function","setInterval","clearInterval","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","global","task","tasksByHandle","nextHandle","registerImmediate","handle","runIfPresent","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","messagePrefix","Math","random","onGlobalMessage","event","source","slice","addEventListener","attachEvent","MessageChannel","channel","port1","port2","createElement","html","documentElement","script","removeChild","appendChild","self","g","eval","Upload","sign","uploadComplete","uploadAbort","uploadMethods","param","singlePart","multiPart","chunks","chunkSize","chunkCount","chunksComplete","uploadedBytes","aborted","created","initialized","fileRecord","filename","size","_checkMultipart","contentType","progress","save","_create","_initialize","_prepareUpload","_updateProgress","percent","record","_createSuccess","tokens","signing","_initializeComplete","uploadId","pieceSize","pieceCount","_createChunks","_completeUpload","_uploadFile","_onCompleteUpload","blob","chunk","start","end","sliceMethod","_getSliceMethod","chunkPromises","min","partNumber","_uploadChunk","multiPartPromise","_signUpload","_sendUpload","_completeChunk","singlePartPromise","_sendSinglepartComplete","_uploadFileComplete","authorization","authHeader","dateHeader","securityToken","_requestProgress","requestPromise","totalBytes","round","_abortComplete","abortSync","abortSyncComplete","overrides","ResourceTypes","currentUser","transfer","updateRoles","revoke","getCurrentUserInfo","transferUserAuthorship","oldId","newId","revokeCurrentUser","updateUserRoles","roleIDs","role_ids","keysById","invite","invoices","invoicesById","currentUsage","customers","customerById","customerCardInformation","getPendingUsers","deletePendingUser","linkUser","networkId","userId","unlinkUser","inviteUser","email","resend","getSecureKeys","addSecureKey","getSecureKeyById","keyId","updateSecureKey","deleteSecureKey","createCustomer","stripeToken","updateCustomer","cusId","networkName","deleteCustomer","getCustomerCardInformation","customerId","deleteCustomerCard","getInvoices","getInvoiceById","invoiceId","getCurrentUsage","pendingUserId","variants","publish","getVariants","ids","_private","isStatusSet","allWithFilters","searchWithFilters","filters","urlTemplate","filterChain","join","types","filterStatus","filterType","filterString","getTypes","getStatus","streamKey","stream_key"],"mappings":"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","file":"ingest-sdk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"IngestSDK\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestSDK\"] = factory();\n\telse\n\t\troot[\"IngestSDK\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"IngestSDK\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestSDK\"] = factory();\n\telse\n\t\troot[\"IngestSDK\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 10);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Promise = __webpack_require__(5);\nvar extend = __webpack_require__(0);\n\nvar JWTUtils = __webpack_require__(7);\nvar RequestManager = __webpack_require__(8);\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n */\nfunction Request (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET',\n    ignoreAcceptHeader: false,\n    requestProgress: null,\n  };\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  this.maxRetrys = 3;\n  this.retrys = 0;\n};\n\n/**\n * Send the request and return a promise to resolve when the request is complete.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nRequest.prototype.send = function () {\n  this.promise = Promise();\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Add the request to the queue and send it\n    this.makeRequest();\n  } else {\n    this.requestError('Request Error : a url is required to make the request.');\n  }\n\n  // Return the promise. Once complete send of the next request if necessary\n  return this.promise\n    .then(RequestManager._sendNextRequest);\n};\n\n/**\n * Send the request synchronously\n * @param {function} callback Function to call when the request is completed.\n * @return {object} The result of the request.\n */\nRequest.prototype.sendSync = function (callback) {\n\n  if (typeof callback === 'function') {\n    this.callback = callback;\n  }\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Add the request to the queue and send it\n    return this.makeRequest();\n  }\n\n  this.requestError('Request Error : a url is required to make the request.');\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n  if (typeof this.options.requestProgress === 'function') {\n    this.request.upload.onprogress = this.progressEvent.bind(this);\n  }\n};\n\n/**\n * Execute the open and construction of the XMLHttpRequest and its data\n */\nRequest.prototype.makeRequest = function () {\n  var postData = this.preparePostData(this.options.data);\n  var headers = this.options.headers;\n  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  // Set before we apply the headers so it can be overridden on a per request basis.\n  if (!this.options.ignoreAcceptHeader) {\n    this.request.setRequestHeader('Accept', 'application/vnd.ingest.v1+json');\n  }\n\n  if (headers) {\n    this.applyRequestHeaders(headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n\n  }\n\n  // Set the default content type when posting data.\n  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n    this.request.setRequestHeader('Content-Type', 'application/vnd.ingest.v1+json');\n  }\n\n  // If the request should be made synchronously then we don't want to add it to the RequestManager.\n  if (!this.options.async) {\n\n    if (postData.data) {\n      this.request.send(postData.data);\n    } else {\n      this.request.send();\n    }\n\n    if (!this.isValidResponseCode(this.request.status)) {\n      this.requestError('Request Error : invalid response code : ' + this.request.status);\n    }\n\n  } else {\n    // If everything is good lets add it to the queue\n    RequestManager.addRequest([this.request, postData.data]);\n  }\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data,\n    type: 'JSON'\n  };\n\n  // In the case of file uploads, all FormData to be passed to the request.\n  if (data instanceof FormData) {\n    result.type = 'FormData';\n    return result;\n  }\n\n  if (data instanceof Blob) {\n    result.type = 'File';\n    return result;\n  }\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n  }\n\n  return result;\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  if (!this.promise) {\n\n    if (typeof this.callback === 'function') {\n      this.callback(null, this.response);\n    }\n\n    return;\n  }\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.errors, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n  var hasContent = this.request.status !== 202 && this.request.status !== 204;\n\n  // Parse JSON if the result is JSON.\n  if (hasContent && responseType && responseType.indexOf('json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        errors: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {Object | String} message   Error object or error message.\n */\nRequest.prototype.requestError = function (message) {\n  var error;\n\n  // If there isn't a promise, in the case of a synchronous request, handle the error.\n  if (!this.promise) {\n\n    error = new Error(message);\n\n    if (typeof this.callback === 'function') {\n      this.callback(error);\n      return;\n    }\n\n    throw error;\n\n  }\n\n  // Reject the promise.\n  this.promise(false, [{\n    message: message,\n    headers: this.request.getAllResponseHeaders(),\n    statusCode: this.request.status\n  }]);\n};\n\nRequest.prototype.progressEvent = function (e) {\n  if (e.lengthComputable) {\n    this.options.requestProgress(e.loaded, e.total);\n  }\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n  var resp, retryAfterTime;\n\n  retryAfterTime = 1000;\n\n  switch (this.request.readyState) {\n  case 4:\n\n    // If we get a rate limit error, lets just retry the request\n    if (this.request.status === 429 && (this.retrys < this.maxRetrys)) {\n      if (this.request.getResponseHeader('Retry-After')) {\n        retryAfterTime = this.request.getResponseHeader('Retry-After') * 1000;\n      }\n\n      this.retrys++;\n      setTimeout(this.makeRequest.bind(this), retryAfterTime);\n      return;\n    }\n\n    // Check if the final response code is valid\n    if (this.isValidResponseCode(this.request.status)) {\n      return this.requestComplete(this.request.responseText);\n    } else if (this.request.getResponseHeader('Content-Length') === '0') {\n      return this.requestError('Request Error: Invalid response code : ' + this.request.status);\n    }\n\n    // Special case error handling with response body\n    resp = this.processResponse(this.request.response);\n    this.requestError(resp.data);\n    break;\n  default:\n    // Silence is golden\n  }\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {Number}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n * Cancel the current XHR request.\n */\nRequest.prototype.cancel = function () {\n  // Remove the event listener.\n  this.request.onreadystatechange = null;\n  this.request.abort();\n  this.requestError('Request has been canceled.');\n};\n\nmodule.exports = Request;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Promise = __webpack_require__(5);\nvar Utils = {};\n\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nUtils.parseTokens = function (template, hash) {\n  var keys, i, length;\n\n  if (!template) {\n    return null;\n  }\n\n  keys = Object.keys(hash);\n  length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nUtils.promisify = function (state, value) {\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n};\n\n/**\n * Wrap an array of promises and return when they have all completed.\n * @param   {Array}     promises  An array of promises to manage.\n * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n */\nUtils.series = function (promises, paused) {\n\n  var promisesCount = promises.length;\n  var all = Promise();\n\n  var state = {\n    total: promisesCount,\n    complete: 0,\n    responses: [],\n    promises: promises,\n    paused: true\n  };\n\n  all.pause = Utils._seriesPause.bind(undefined, all, state);\n  all.resume = Utils._seriesResume.bind(undefined, all, state);\n  all.cancel = Utils._seriesCancel.bind(undefined, all, state);\n\n  if (!paused) {\n    state.paused = false;\n    Utils._seriesCallPromise(promises[0], state, all);\n  }\n\n  return all;\n\n};\n\n/**\n * Call a promise and pass the complete and error functions.\n * @param  {Promise} promise Promise to execute on.\n * @param  {Object} state   Persistent state of the series of promises.\n */\nUtils._seriesCallPromise = function (promise, state, all) {\n  // Call the promise.\n  if (!state.paused) {\n    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n      Utils._seriesError.bind(undefined, all, state));\n  }\n};\n\n/**\n * Manage the progress of the promises.\n * @private\n * @param  {Promise} all      All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesComplete = function (all, state, response) {\n\n  // Early return if this has been canceled.\n  if (state.canceled) {\n    return;\n  }\n\n  // Increment the complete promises.\n  state.complete++;\n  state.responses.push(response);\n\n  if (state.complete >= state.total) {\n    all(true, state.responses);\n  } else {\n    if (!state.paused) {\n      // Execute the next promise.\n      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n    }\n  }\n\n};\n\n/**\n * Immediately reject the promise if there is an error.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesError = function (all, state, error) {\n  all(false, [error]);\n};\n\n/**\n * Pause the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesPause = function (all, state) {\n  state.paused = true;\n};\n\n/**\n * Resume the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesResume = function (all, state) {\n  state.paused = false;\n\n  if (state.complete !== state.total) {\n    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n  }\n};\n\n/**\n * Resolve the promise but return an empty response.\n * @param  {Promise}  all     All promise.\n * @param  {Object}   state   State object used to persist the promise count.\n */\nUtils._seriesCancel = function (all, state) {\n  state.canceled = true;\n  all(true, []);\n};\n\n/**\n * Return true if a file provided matches a support image type.\n * @param  {file}     file  A reference to an image file.\n * @return {Boolean}        True if the type matches a known image type.\n */\nUtils.isImage = function (file) {\n  return file.type.indexOf('image') !== -1;\n};\n\nmodule.exports = Utils;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar extend = __webpack_require__(0);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\n\n/**\n * Abstract Resource Class\n *\n * @param {object} options - SDK Options.\n * @class\n */\nfunction Resource (options) {\n\n  this.defaults = {\n    host: 'https://api.ingest.io',\n    all: '/<%=resource%>',\n    byId: '/<%=resource%>/<%=id%>',\n    trash: '/<%=resource%>?status=trashed',\n    deleteMethods: {\n      'permanent': '?permanent=1'\n    },\n    search: '/<%=resource%>?search=<%=input%>',\n    tokenSource: null,\n    resource: null\n  };\n\n  this.config = extend(true, {}, this.defaults, options);\n}\n\n/**\n * Proxy the request to token source to ensure a value is always returned.\n * @private\n * @return {string} Auth token.\n */\nResource.prototype._tokenSource = function () {\n  var result = null;\n\n  if (this.config.tokenSource) {\n    result = this.config.tokenSource.call();\n  }\n\n  return result;\n};\n\n/**\n * Return a list of the requested resource for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.getAll = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a resource that matches the supplied id.\n * @param  {string}   id    Resource id.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nResource.prototype.getById = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string' || id.length <= 0) {\n    return utils.promisify(false,\n      'IngestSDK Resource getById requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Return the resources currently in the trash.\n * @param  {object} headers Headers to be passed along with the request for pagination.\n * @return {promise}         A promise which resolves when the request is complete.\n */\nResource.prototype.getTrashed = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Add a new resource.\n * @param   {object}  resource  An object representing the resource to add.\n * @return  {promise}           A promise which resolves when the request is complete.\n */\nResource.prototype.add = function (resource) {\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Resource add requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send();\n};\n\n/**\n * Update an existing resource with new content.\n * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nResource.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Resource update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Delete an existing resource\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.delete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, false, async);\n};\n\n/**\n * Permanently delete an existing resource.\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.permanentDelete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, true, async);\n};\n\n/**\n * Delete a single resource\n * @private\n * @param   {object}    resource    The id of the resource to be deleted.\n * @param   {boolean}   permanent   A flag to permanently delete each video.\n * @return  {promise}               A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResource = function (resource, permanent) {\n  var request;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Delete an existing resource\n * @param  {string}     resource    The id for the resource to be deleted.\n * @param  {function}   callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype.deleteSync = function (resource, callback) {\n\n  if (typeof resource !== 'string') {\n    callback(new Error('IngestSDK Resource delete requires a resource to be passed as a string.'));\n    return;\n  }\n\n  this._deleteResourceSync(resource, false, callback);\n\n};\n\n/**\n * Permanently delete an existing resource.\n * @param   {string}    resource    The id for the resource to be deleted.\n * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype.permanentDeleteSync = function (resource, callback) {\n\n  if (typeof resource !== 'string') {\n    callback(new Error('IngestSDK Resource delete requires a resource to be passed as a string.'));\n    return;\n  }\n\n  this._deleteResourceSync(resource, true, callback);\n\n};\n\n/**\n * Delete a single resource synchronously\n * @private\n * @param   {object}    resource    The id of the resource to be deleted.\n * @param   {boolean}   permanent   A flag to permanently delete each video.\n * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype._deleteResourceSync = function (resource, permanent, callback) {\n  var request;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    async: false,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  request.sendSync(callback);\n};\n\n/**\n * Return a subset of items that match the search terms.\n * @param  {string}   input     The search terms to match against.\n * @param  {object}   headers   The headers to be passed to the request.\n * @param  {boolean}  trash     Should we be searching the trash.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.search = function (input, headers, status) {\n  var url, request;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource search requires search input to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.search, {\n    resource: this.config.resource,\n    input: encodeURIComponent(input)\n  });\n\n  // If there is a status and it\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Resource search requires a valid status to be passed as a string.');\n    }\n\n    url = url + '&status=' + status;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a subset of items that match the search terms in the trash.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.searchTrash = function (input, headers) {\n  return this.search(input, headers, 'trashed');\n};\n\n/**\n * Get the total count of resources.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.count = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n/**\n * Get the total count of resources in the trash.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.trashCount = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n/**\n * Return the resource count from the response.\n * @private\n * @param  {object} response Request response object.\n * @return {number}          The resource count.\n */\nResource.prototype._handleCountResponse = function (response) {\n  return parseInt(response.headers('Resource-Count'), 10);\n};\n\nmodule.exports = Resource;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Constants for our resource types\n */\nmodule.exports = {\n  'EVENTS': 'events',\n  'INPUTS': 'encoding/inputs',\n  'JOBS': 'encoding/jobs',\n  'NETWORKS': 'networks',\n  'PROFILES': 'encoding/profiles',\n  'ROLES': 'roles',\n  'USERS': 'users',\n  'VIDEOS': 'videos',\n  'LIVESTREAMS': 'live'\n};\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(setImmediate, process) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function (root, factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.pinkySwear = factory();\n\t}\n}(this, function() {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\treturn function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n}));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11).setImmediate, __webpack_require__(6)))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nfunction parseTokenPayload (token) {\n  var payload;\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // Decode the payload portion.\n  payload = window.atob(parts[1]);\n\n  // Parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Manages request objects in a queueing system\n */\nfunction RequestManager () {\n  this.pending = [];\n  this.activeRequests = 0;\n  this.currentSetRequests = 0;\n  this.lastRequestSetStart = null;\n  this.resetTimer = null;\n\n  this._sendNextRequest = this.sendNextRequest.bind(this);\n  this._resetCurrentSet = this.resetCurrentSet.bind(this);\n};\n\n/**\n * Sets the max requests for the Request Manager\n *\n * @param {number} maxRequests - The maximum allowed requests at one time\n */\nRequestManager.prototype.setMaxRequests = function (maxRequests) {\n  this.maxRequests = maxRequests;\n};\n\n/**\n * Resets the current set and sets the last request start to the passed in value\n *\n * @param {any} newDate - The new date timestamp or null\n */\nRequestManager.prototype.resetCurrentSet = function (newDate) {\n  this.currentSetRequests = 0;\n  this.lastRequestSetStart = newDate;\n};\n\n/**\n * Sends a request or adds it to the queue if it can't be sent\n *\n * @param {array} requestData - The request object and request data in an array\n *\n * @return\n */\nRequestManager.prototype.addRequest = function (requestData) {\n  // If we have too many out then queue the request\n  if (this.activeRequests >= this.maxRequests) {\n    this.pending.push(requestData);\n    return;\n  }\n\n  // Otherwise send the request\n  this.sendRequest(requestData[0], requestData[1]);\n};\n\n/**\n * Sends the request\n *\n * @param {object} request - The request object\n * @param {object} data    - The request data\n */\nRequestManager.prototype.sendRequest = function (request, data) {\n\n  // If there is a reset timer, we need to clear it so its not run\n  if (this.resetTimer) {\n    clearTimeout(this.resetTimer);\n  }\n\n  // If this request is the start of a set, lets reset the set data\n  if (this.currentSetRequests % this.maxRequests === 0) {\n    this.resetCurrentSet(Date.now());\n  }\n\n  // Increment counters\n  this.activeRequests++;\n  this.currentSetRequests++;\n\n  // Send data\n  if (data) {\n    request.send(data);\n  } else {\n    request.send();\n  }\n};\n\n/**\n * Sends the next available request if applicable\n *\n * @param {object}  response - The http response data\n *\n * @return {object} response - The http response data\n */\nRequestManager.prototype.sendNextRequest = function (response) {\n  var XRatelimitRemaining, moreRequests, requestData, delay;\n\n  // Deincrement counter\n  this.activeRequests--;\n\n  // No more to send, reset data if enough time passes\n  if (this.pending.length === 0) {\n\n    // If i don't have a timer already and have no active requests\n    if (!this.resetTimer && this.activeRequests === 0) {\n      // Set the reset timer so new calls are in sync\n      this.resetTimer = setTimeout(this._resetCurrentSet, this.XRatelimitLimit * 1000);\n    }\n\n    // Return response\n    return response;\n  }\n\n  // Only run the first time to get the limits\n  if (!this.XRatelimitReset) {\n    // Set the reset and the limit\n    this.XRatelimitReset = response.headers('X-Ratelimit-Reset');\n    this.XRatelimitLimit = response.headers('X-Ratelimit-Limit');\n\n    // If the limit returned from the server is less than the set max limit, lets override it\n    if (this.XRatelimitLimit < this.maxRequests) {\n      this.maxRequests = this.XRatelimitLimit;\n    }\n  }\n\n  // Get my next request and requests remaining\n  requestData = this.pending.shift();\n  XRatelimitRemaining = response.headers('X-Ratelimit-Remaining');\n\n  // See if I can send more requests right now\n  moreRequests = (this.activeRequests < this.maxRequests) && (XRatelimitRemaining > 0);\n\n  // If I can send more requests send them\n  if (moreRequests) {\n    this.sendRequest(requestData[0], requestData[1]);\n  } else {\n    // Otherwise lets delay so these get sent in the next tick\n    delay = (Date.now() - this.lastRequestSetStart) < 100 ? 100 : (Date.now() - this.lastRequestSetStart);\n\n    // Delay the call of the next send request\n    setTimeout(this.sendRequest.bind(this, requestData[0], requestData[1]), delay);\n  }\n\n  // Return the response\n  return response;\n};\n\nmodule.exports = new RequestManager();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\n\n/**\n * Abstract PlaybackContent Class\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction PlaybackContent (options) {\n\n  var overrides = {\n    thumbnail: '/<%=resource%>/<%=id%>/thumbnail',\n    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n    deleteThumbnail: '/<%=resource%>/<%=id%>/thumbnail/<%=thumbnailId%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nPlaybackContent.prototype = Object.create(Resource.prototype);\nPlaybackContent.prototype.constructor = PlaybackContent;\n\n/**\n * Retrieve all thumbnails for a provided resource id.\n * @param {string}    id    ID of the resource to retrieve thumbnails for.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.getThumbnails = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent getThumbnails requires an id to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}          id      ID of the resource to add the external thumbnails to.\n * @param   {string|array}    images  A path to the image, or an array of image paths.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.addExternalThumbnails = function (id, images) {\n\n  var url, request;\n\n  var imagesToAdd = [];\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent addExternal requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!Array.isArray(images) && typeof images !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent addExternal requires images as a string or an array of strings.');\n  }\n\n  // If we already have an array replace the outgoing array, otherwise push the image path to the array.\n  // This ensures we are always passing an array.\n  if (Array.isArray(images)) {\n    imagesToAdd = images;\n  } else {\n    imagesToAdd.push(images);\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: imagesToAdd\n  });\n\n  return request.send();\n\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}        id        ID of the resource to add the external thumbnails to.\n * @param   {file}          image     A JavaScript File interface representing the image to upload.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.uploadThumbnail = function (id, image) {\n\n  var request, url, formData;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent uploadThumbnail requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!image || !(image instanceof File) || !utils.isImage(image)) {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent uploadThumbnail requires a valid image.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnail, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  // Create a new FormData object so the request is properly sent as multipart.\n  formData = new FormData();\n  formData.append('image', image);\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: formData\n  });\n\n  return request.send();\n\n};\n\n/**\n * Remove an external thumbnail image.\n *\n * @param   {string}    id            ID of the resource to remove the thumbnail from.\n * @param   {string}    thumbnailId   ID of the thumbnail to remove from the resource.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.deleteThumbnail = function (id, thumbnailId) {\n\n  var request, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent deleteThumbnail requires an id to be passed as a string.');\n  }\n\n  if (typeof thumbnailId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent deleteThumbanil requires a thumbnailId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.deleteThumbnail, {\n    resource: this.config.resource,\n    id: id,\n    thumbnailId: thumbnailId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n\n};\n\nmodule.exports = PlaybackContent;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar extend = __webpack_require__(0);\nvar Request = __webpack_require__(1);\nvar JWTUtils = __webpack_require__(7);\nvar utils = __webpack_require__(2);\nvar Uploader = __webpack_require__(14);\nvar RequestManager = __webpack_require__(8);\n\nvar Resource = __webpack_require__(3);\nvar Media = __webpack_require__(9);\nvar Users = __webpack_require__(15);\nvar Networks = __webpack_require__(16);\nvar Videos = __webpack_require__(17);\nvar Jobs = __webpack_require__(18);\nvar Profiles = __webpack_require__(19);\nvar Inputs = __webpack_require__(20);\nvar Events = __webpack_require__(21);\nvar Roles = __webpack_require__(22);\nvar Livestreams = __webpack_require__(23);\n\n/**\n * IngestAPI Object\n * @class\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestSDK (options) {\n  var resourceConfig;\n\n  this.defaults = {\n    'maxRequests': 6, // Active Requests\n    'host': 'https://api.ingest.io'\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.token = null;\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  /* Exposed for testing */\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n  this.utils = utils;\n  this.resource = Resource;\n  this.playbackContent = Media;\n  this.usersResource = Users;\n  this.networksResource = Networks;\n  this.videosResource = Videos;\n  this.jobsResource = Jobs;\n  this.profilesResource = Profiles;\n  this.inputsResource = Inputs;\n  this.uploader = Uploader;\n  this.eventsResource = Events;\n  this.rolesResource = Roles;\n  this.livestreamsResource = Livestreams;\n\n  // Set my max requests\n  this.requestManager = RequestManager;\n  this.setMaxRequests(this.config.maxRequests);\n\n  resourceConfig = {\n    host: this.config.host,\n    tokenSource: this.getToken.bind(this)\n  };\n\n  this.videos = new Videos(resourceConfig);\n  this.inputs = new Inputs(resourceConfig);\n  this.users = new Users(resourceConfig);\n  this.networks = new Networks(resourceConfig);\n  this.profiles = new Profiles(resourceConfig);\n  this.jobs = new Jobs(resourceConfig);\n  this.events = new Events(resourceConfig);\n  this.roles = new Roles(resourceConfig);\n  this.livestreams = new Livestreams(resourceConfig);\n}\n\n/** Token **/\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestSDK.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (typeof token !== 'string') {\n    throw new Error('IngestSDK requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n};\n\n/**\n * Sets the maxrequests in the Request Manager\n * @param {number} max - The max amount of requests at once\n */\nIngestSDK.prototype.setMaxRequests = function (max) {\n  // Make sure we have a valid number.\n  if (typeof max !== 'number' || max < 1) {\n    throw new Error('IngestSDK requires a maxRequest count to be passed as a positive number.');\n  }\n\n  RequestManager.setMaxRequests(max);\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token, or null if a token has not been set.\n */\nIngestSDK.prototype.getToken = function () {\n  return this.token;\n};\n\n/**\n * Create a new input and upload a file.\n * @param  {File}   file    File to upload.\n * @return {Promise} A promise which resolves when the upload is complete.\n */\nIngestSDK.prototype.upload = function (file) {\n  return new Uploader({\n    file: file,\n    api: this,\n    host: this.config.host\n  });\n};\n\nmodule.exports = IngestSDK;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(12);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13), __webpack_require__(6)))\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar extend = __webpack_require__(0);\nvar Request = __webpack_require__(1);\nvar Promise = __webpack_require__(5);\nvar utils = __webpack_require__(2);\n\n/**\n * Create a new upload wrapper.  Manages the entire upload of a file.\n * @class\n * @param   {object}  options                   Configuration options to override the defaults.\n * @param   {object}  options.api               A reference to the parent API instance.\n * @param   {object}  options.file              The file to upload.\n * @param   {object}  options.upload            REST endpoint for creating an input.\n * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n */\nfunction Upload (options) {\n\n  this.defaults = {\n    api: null,\n    file: null,\n    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n    uploadMethods: {\n      param: '?type=',\n      singlePart: 'amazon',\n      multiPart: 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.api = this.config.api;\n  this.file = this.config.file;\n\n  this.chunks = [];\n  this.chunkSize = 0;\n  this.chunkCount = 0;\n  this.chunksComplete = 0;\n  this.uploadedBytes = 0;\n\n  this.aborted = false;\n  this.paused = false;\n  this.created = false;\n  this.initialized = false;\n\n  // Set to true when all the chunks are uploaded, but before the complete call is made.\n  this.uploadComplete = false;\n\n  this.fileRecord = {\n    filename: this.file.name,\n    type: this.file.type,\n    size: this.file.size,\n    method: this._checkMultipart(this.file),\n    contentType: 'application/octet-stream'\n  };\n\n};\n\n/**\n * Register a function to execute when a chunk completes uploading.\n * @param  {Function} callback A callback to execute when progress is made.\n */\nUpload.prototype.progress = function (callback) {\n  this.config.progress = callback.bind(this);\n};\n\n/**\n * Create a new input record and upload the files to amazon.\n * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n */\nUpload.prototype.save = function () {\n  return this._create(this.fileRecord)\n    .then(this._initialize.bind(this))\n    .then(this._prepareUpload.bind(this));\n};\n\n/**\n * Call the progress callback and pass the current progress percentage.\n * @private\n * @param  {number} message Current progress percentage.\n */\nUpload.prototype._updateProgress = function (percent, chunkSize) {\n\n  if (!this.config.progress) {\n    return;\n  }\n\n  this.config.progress.call(this, percent, chunkSize);\n};\n\n/**\n * Create a new input record.\n * @private\n * @param   {object}  record  A JSON object representing the input record to create.\n * @return  {Promise}         A promise which resolves when the new input record is created.\n */\nUpload.prototype._create = function (record) {\n\n  if (this.created) {\n    return utils.promisify(true, this.fileRecord.id);\n  }\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  return this.api.inputs.add(record).then(this._createSuccess.bind(this));\n};\n\n/**\n * Return the data object from the response.\n * @private\n * @param  {JSON}   response  JSON response containing the new input record id.\n * @return {string}           new input record id.\n */\nUpload.prototype._createSuccess = function (response) {\n\n  this.created = true;\n\n  this._updateProgress(0, 0);\n\n  // Store the input record.\n  this.input = response.data;\n\n  this.fileRecord.id = response.data.id;\n\n  return this.fileRecord.id;\n};\n\n/**\n * Initializes an Input for upload\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._initialize = function () {\n  var url;\n  var tokens;\n  var signing = '';\n  var request;\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._initializeComplete.bind(this));\n\n};\n\n/**\n * Store the information returned from the initialize request.\n * @private\n */\nUpload.prototype._initializeComplete = function (response) {\n  this.initialized = true;\n  this.fileRecord.key = response.data.key;\n  this.fileRecord.uploadId = response.data.uploadId;\n  this.chunkSize = response.data.pieceSize;\n  this.chunkCount = response.data.pieceCount;\n};\n\n/**\n * Setup the upload depending on its type, single or multi part.\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._prepareUpload = function () {\n  if (!this.fileRecord.method) {\n    // Singlepart.\n    return this._uploadFile()\n      .then(this._onCompleteUpload.bind(this));\n  }\n\n  // Multipart.\n  return this._createChunks()\n    .then(this._completeUpload.bind(this));\n};\n\n/**\n * Break a file into blobs and create a chunk object for each piece.\n * @private\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._createChunks = function () {\n  var sliceMethod = this._getSliceMethod(this.file);\n  var i, blob, chunk, start, end,\n    chunkPromises = [];\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  for (i = 0; i < this.chunkCount; i++) {\n\n    start = i * this.chunkSize;\n    // Choose the smaller value, so that we don't go over the filesize.\n    end = Math.min((i + 1) * this.chunkSize, this.fileRecord.size);\n\n    blob = this.file[sliceMethod](start, end);\n\n    chunk = {\n      partNumber: i + 1,\n      data: blob\n    };\n\n    this.chunks.push(chunk);\n\n    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\n  }\n\n  // Store a reference for pausing and resuming.\n  this.multiPartPromise = utils.series(chunkPromises, this.paused);\n\n  return this.multiPartPromise;\n};\n\n/**\n * Create a promise chain for each chunk to be uploaded.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadChunk = function (chunk) {\n  var promise = Promise();\n\n  // Break the promise chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._completeChunk.bind(this, chunk, promise));\n\n  return promise;\n};\n\n/**\n * Create a promise chain for a single part file upload.\n * @param  {file}   file    A file reference to upload.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadFile = function () {\n  var chunk = {\n    data: this.file\n  };\n\n  // Create a new promise if one doesn't exist.\n  if (!this.singlePartPromise) {\n    this.singlePartPromise = Promise();\n  }\n\n  // Broken off the chain, this will allow us to cancel single part uploads without breaking the\n  // initial chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._sendSinglepartComplete.bind(this))\n    .then(this._updateProgress.bind(this, 100, this.fileRecord.size))\n    .then(this._uploadFileComplete.bind(this));\n\n  return this.singlePartPromise;\n};\n\n/**\n *  Resolve the single part upload promise;\n */\nUpload.prototype._uploadFileComplete = function () {\n  this.singlePartPromise(true, []);\n};\n\n/**\n * Make a request and sign the chunk to be uploaded.\n * @private\n * @param  {object}   chunk           Information about the chunk to be uploaded.\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nUpload.prototype._signUpload = function (chunk) {\n  var url;\n  var signing = '';\n  var headers = {};\n  var request;\n\n  // Set the part number for the current chunk.\n  if (chunk.partNumber) {\n    this.fileRecord.partNumber = chunk.partNumber;\n  }\n\n  headers['Content-Type'] = 'multipart/form-data';\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n    id: this.fileRecord.id,\n    method: signing\n  });\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    headers: headers,\n    data: this.fileRecord\n  });\n\n  return request.send();\n};\n\n/**\n * Send the upload to the server.\n * @private\n * @param   {object} upload  An object representing the upload to send to the server.\n * @return  {Promise}       A promise which resolves when the request is complete.\n */\nUpload.prototype._sendUpload = function (upload, response) {\n  var headers = {};\n  var request;\n\n  // Set the proper headers to send with the file.\n  headers['Content-Type'] = this.fileRecord.contentType;\n\n  headers.authorization = response.data.authHeader;\n  headers['x-amz-date'] = response.data.dateHeader;\n  headers['x-amz-security-token'] = response.data.securityToken;\n\n  request = new Request({\n    url: response.data.url,\n    method: 'PUT',\n    headers: headers,\n    data: upload.data,\n    ignoreAcceptHeader: true,\n    requestProgress: this._requestProgress.bind(this),\n  });\n\n  this.requestPromise = request;\n\n  return request.send();\n};\n\n/**\n * Update the progress of requestProgress\n */\nUpload.prototype._requestProgress = function (uploadedBytes, totalBytes) {\n  var progress;\n\n  // BUGWATCH: if we change this to upload multiple chunks at once this will have to be written\n  // other chunks completed data + the current chunk in the request\n  progress = (this.uploadedBytes + uploadedBytes) / this.fileRecord.size;\n  progress *= 99;\n  progress = Math.round(progress);\n\n  this._updateProgress(progress, totalBytes);\n};\n\n/**\n * Update the upload bytes value when a single part file is uploaded.\n */\nUpload.prototype._sendSinglepartComplete = function () {\n  this.uploadComplete = true;\n  this.uploadedBytes = this.fileRecord.size;\n};\n\n/**\n *  Executed when a chunk is finished uploading.\n *  @private\n *  @param {object}   chunk   The current chunk that was uploaded.\n *  @param {Promise}  promise The promise to resolve when the chunk is complete.\n */\nUpload.prototype._completeChunk = function (chunk, promise) {\n  this.chunksComplete++;\n  chunk.complete = true;\n  this.uploadedBytes += chunk.data.size;\n\n  // Upload is complete.\n  if (this.chunksComplete === this.chunkCount) {\n    this.uploadComplete = true;\n  }\n\n  // Resolve the promise.\n  promise(true, []);\n};\n\n/**\n * Notify the server that the upload is complete.\n *\n * @private\n * @return  {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._completeUpload = function () {\n  var url;\n  var tokens;\n  var request;\n\n  // Early return so we don't process any of the complete information on an aborted upload.\n  if (this.aborted) {\n    return utils.promisify(false, 'Upload Aborted.');\n  }\n\n  tokens = {\n    id: this.fileRecord.id\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._onCompleteUpload.bind(this));\n};\n\n/**\n * Return the id for the current file record.\n * @private\n * @return {string} ID for the input record that was created.\n */\nUpload.prototype._onCompleteUpload = function () {\n  // Send the final progress update once the upload is actually complete.\n  this._updateProgress(100);\n\n  this.uploadComplete = true;\n  this.multiPartPromise = null;\n  this.requestPromise = null;\n  this.singlePartPromise = null;\n  return this.fileRecord.id;\n};\n\n/**\n * Aborts an input upload\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype.abort = function () {\n  var url;\n  var tokens;\n  var request;\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early with a\n      // promise to delete the created input record.\n      return this.api.inputs.delete(this.fileRecord.id);\n    }\n\n    // Resolve as a successful promise. This case would be fulfilled when an upload\n    // has been created but save() hasn't yet been called.\n    return utils.promisify(true);\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singlePartPromise = null;\n    // Return here because there is no need to abort a single part upload.\n    return this._abortComplete();\n  }\n\n  if (this.multiPartPromise) {\n    this.multiPartPromise.cancel();\n    this.multiPartPromise = null;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n    .then(this._abortComplete.bind(this));\n\n};\n\n/**\n * Aborts an input upload\n * @param {function} callback Callback executed when the request is complete, or an error occurs.\n */\nUpload.prototype.abortSync = function (callback) {\n  var url;\n  var tokens;\n  var request;\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early and delete the input.\n      this.api.inputs.deleteSync(this.fileRecord.id, callback);\n      return;\n    }\n\n    // Resolve as a successful promise. This case would be fulfilled when an upload\n    // has been created but save() hasn't yet been called.\n    callback(null);\n    return;\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singlePartPromise = null;\n    // Return here because there is no need to abort a single part upload.\n    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n    return;\n  }\n\n  // If we have a multi part promise we need to cancel it\n  if (this.multiPartPromise) {\n    this.multiPartPromise.cancel();\n    this.multiPartPromise = null;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    async: false,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  request.sendSync(this.abortSyncComplete.bind(this, callback));\n};\n\n/**\n * Delete the input when the abort call completes and then execute the callback.\n *\n * @param {Function} callback - Synchronous callback\n * @param {object}   error    - Error from abort call.\n */\nUpload.prototype.abortSyncComplete = function (callback, error) {\n\n  if (!error) {\n    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n  } else if (typeof callback === 'function') {\n    callback(error);\n  } else {\n    throw error;\n  }\n\n};\n\n/**\n * Delete the input that was created.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._abortComplete = function () {\n  return this.api.inputs.delete(this.fileRecord.id);\n};\n\n/**\n * Pause the current upload.\n */\nUpload.prototype.pause = function () {\n  // Return early if the upload portion is complete.\n  // The work is done by now so we might as well fire the\n  // complete call.\n  if (this.uploadComplete) {\n    return;\n  }\n\n  this.paused = true;\n\n  // Is there a multipart upload\n  if (this.multiPartPromise) {\n    // Pause the series if its a multipart upload.\n    this.multiPartPromise.pause();\n  }\n\n  // Abort the upload if its a singlepart upload and cancel the request if it is a multipart promise\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n  }\n};\n\n/**\n * Resume the current upload.\n */\nUpload.prototype.resume = function () {\n  this.paused = false;\n\n  if (this.multiPartPromise) {\n    // Resume the series if it's multipart.\n    this.multiPartPromise.resume();\n  } else if (this.requestPromise) {\n    // Restart the file upload.\n    this._uploadFile();\n  }\n\n};\n\n/**\n * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n * @private\n *\n * @param {File} file - The file to evaluate.\n *\n * @return {boolean} - True if the file will be uploading using mutlipart upload.\n */\nUpload.prototype._checkMultipart = function (file) {\n  if (!file) {\n    throw new Error('Upload::_checkMultipart - A file object is required.');\n  }\n\n  return file.size > (5 * 1024 * 1024);\n};\n\n/**\n * Function that determines the slice method to be used\n * @private\n * @param {object} file - The file object you wish to determine the slice method for\n * @return {string} sliceMethod - The slice method to use.\n */\nUpload.prototype._getSliceMethod = function (file) {\n  var sliceMethod;\n\n  if ('mozSlice' in file) {\n    sliceMethod = 'mozSlice';\n  } else if ('webkitSlice' in file) {\n    sliceMethod = 'webkitSlice';\n  } else {\n    sliceMethod = 'slice';\n  }\n\n  return sliceMethod;\n};\n\nmodule.exports = Upload;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Users Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Users (options) {\n\n  var overrides = {\n    resource: ResourceTypes.USERS,\n    currentUser: '/users/me',\n    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n    updateRoles: '/users/<%=id%>/roles',\n    revoke: '/revoke'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nUsers.prototype = Object.create(Resource.prototype);\nUsers.prototype.constructor = Users;\n\n/**\n * Retrieve information for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.getCurrentUserInfo = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Transfer all authorship currently under the specified user onto another.\n * This includes all videos.\n * This task is commonly used in conjunction with permanently deleting a user.\n *\n * @param {string} oldId - The user who currently has authorship.\n * @param {string} newId - The user to transfer authorship to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n  var tokens, url, request;\n\n  if (typeof oldId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK transferUserAuthorship requires `oldId` to be passed as a string.');\n  }\n\n  if (typeof newId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK transferUserAuthorship requires `newId` to be passed as a string');\n  }\n\n  tokens = {\n    oldId: oldId,\n    newId: newId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Revokes the authorization token for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.revokeCurrentUser = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser + this.config.revoke,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Updates a user with the passed in roles\n *\n * @param {string} id      - The id of the user to update their roles\n * @param {array}  roleIDs - The role ids of the roles you wish to assign to the user\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.updateUserRoles = function (id, roleIDs) {\n  var request, url, data;\n\n  if (!Array.isArray(roleIDs) || roleIDs.length < 1) {\n    return utils.promisify(false,\n      'IngestSDK updateUserRoles requires `roleIDs` to be passed as an array.');\n  }\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK updateUserRoles requires `id` to be passed as a string.');\n  }\n\n  // Get the url\n  url = utils.parseTokens(this.config.host + this.config.updateRoles, {\n    id: id\n  });\n\n  // Set the data into a structure the api can use it\n  data = {\n    role_ids: roleIDs\n  };\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Users;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Networks Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Networks (options) {\n\n  var overrides = {\n    resource: ResourceTypes.NETWORKS,\n    keys: '/<%=resource%>/<%=networkId%>/keys',\n    keysById: '/<%=resource%>/<%=networkId%>/keys/<%=keyId%>',\n    invite: '/<%=resource%>/<%=networkId%>/invite',\n    invoices: '/<%=resource%>/<%=networkId%>/invoices',\n    invoicesById: '/<%=resource%>/<%=networkId%>/invoices/<%=invoiceId%>',\n    currentUsage: '/<%=resource%>/<%=networkId%>/invoices?currentUsage=true',\n    customers: '/<%=resource%>/<%=networkId%>/customers',\n    customerById: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>',\n    customerCardInformation: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>/card',\n    getPendingUsers: '/<%=resource%>/<%=networkId%>?filter=pending',\n    deletePendingUser: '/<%=resource%>/<%=networkId%>/pending-users/<%=pendingUserId%>',\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nNetworks.prototype = Object.create(Resource.prototype);\nNetworks.prototype.constructor = Networks;\n\n/**\n * Link an existing user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to link.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.linkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK linkUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK linkUser requires `userId` to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'LINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Removes the specified user from the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to unlink.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.unlinkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK unlinkUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK unlinkUser requires `userId` to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'UNLINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Invites a user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  email      The email to send the invite to.\n * @param {string}  name       The name of the person to invite.\n * @param {boolean} resend     [Optional] True: Resend an invite. False for first time invite. Default value is false.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.inviteUser = function (networkId, email, name, resend) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof email !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `email` to be passed as a string.');\n  }\n\n  if (typeof name !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `name` to be passed as a string.');\n  }\n\n  data = {\n    email: email,\n    name: name\n  };\n\n  if (typeof resend === 'boolean') {\n    data.resend = resend;\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invite, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a list of all secure keys for the network given.\n *\n * @param {string}  networkId  The unique ID of the network.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeys = function (networkId) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeys requires `networkId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Adds a new secure key to the specified network.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.addSecureKey = function (networkId, data) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires `data` to be passed as an object.');\n  }\n\n  if (typeof data.key !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Retrieves a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeyById = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeyById requires a `networkId` to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeyById requires a `keyId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an individual secure key entry in the network specified.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.updateSecureKey = function (networkId, data) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires `data` to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires param `data.id` to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: data.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteSecureKey = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deleteSecureKeyById requires a `networkId` to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deleteSecureKeyById requires a `keyId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Creates a Stripe customer for the given network ID.\n *\n * @param {string} stripeToken - The Stripe token to reference submitted payment details.\n * @param {string} networkId   - The network UUID for this Stripe customer.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.createCustomer = function (stripeToken, networkId) {\n  var url, request, data;\n\n  if (typeof stripeToken !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks createCustomer requires stripeToken and networkId to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customers, {\n    networkId: networkId,\n    resource: this.config.resource\n  });\n\n  data = {\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an existing Stripe customer for the given network ID.\n *\n * @param {string} networkId   - The networkID that this Stripe customer belongs to.\n * @param {string} cusId       - The Stripe customer ID you wish to update.\n * @param {string} networkName - [Optional] Only provide if you wish to update the network name on the Stripe customer.\n * @param {string} stripeToken - [Optional] Provide only if payment details have been updated.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.updateCustomer = function (networkId, cusId, networkName, stripeToken) {\n  var url, request, data;\n\n  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks updateCustomer requires `networkId` and `cusID` to be a string.');\n  }\n\n  if (typeof networkName !== 'string' && typeof stripeToken !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks updateCustomer requires either networkName or stripeToken passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: cusId\n  });\n\n  data = {\n    networkName: networkName,\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes an existing Stripe customer for the given network ID.\n *\n * @param {string} networkId - The network ID that the customer belongs to.\n * @param {string} cusId     - The Stripe customer ID to be deleted.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.deleteCustomer = function (networkId, cusId) {\n\n  var url, request;\n\n  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks deleteCustomer requires `networkId` and `cusId` to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: cusId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Gets a customers card information on file\n *\n * @param {string} customerId - The customer ID you wish to get the information for.\n * @param {string} networkId  - The network ID the customer belongs to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getCustomerCardInformation = function (networkId, customerId) {\n  var url, request;\n\n  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks getCustomerCardInformation requires networkId and customerId to be strings');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: customerId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Remove the credit card currently associated with the proviced customer.\n * @param {string} networkId  - The network ID the customer belongs to.\n * @param {string} networkId  - The customer ID.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteCustomerCard = function (networkId, customerId) {\n  var url, request;\n\n  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks deleteCustomerCard requires networkId and customerId to be strings');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: customerId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a networks invoices\n *\n * @param {string} networkId  - The network ID that you wish to get the invoices for.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getInvoices = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false, 'IngestSDK Networks getInvoices requires networkId to be a string');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invoices, {\n    resource: this.config.resource,\n    networkId: networkId,\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a specific invoice for a network\n *\n * @param {string} networkId  - The network ID the customer belongs to.\n * @param {string} invoiceId  - The invoice ID you wish to get the information for.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getInvoiceById = function (networkId, invoiceId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getInvoiceById requires networkId to be passed as a string.');\n  }\n\n  if (typeof invoiceId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getInvoiceById requires invoiceId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invoicesById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    invoiceId: invoiceId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets current usage for a network\n *\n * @param {string} networkId  - The network ID the customer belongs to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getCurrentUsage = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getCurrentUsage requires networkId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.currentUsage, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets all pending users for the specified network.\n *\n * @param {string} networkId - The network ID.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nNetworks.prototype.getPendingUsers = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getPendingUsers requires networkId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.getPendingUsers, {\n    resource:  this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a pending user from the specified network.\n *\n * @param {string} networkId     - The network ID that the pending user belongs to.\n * @param {string} pendingUserId - The pending user to delete from the network.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nNetworks.prototype.deletePendingUser = function (networkId, pendingUserId) {\n  var url, request;\n\n  if (typeof networkId !== 'string' || typeof pendingUserId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deletePendingUser requires networkId and pendingUserId to be passed as strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.deletePendingUser, {\n    resource: this.config.resource,\n    networkId: networkId,\n    pendingUserId: pendingUserId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\nmodule.exports = Networks;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar PlaybackContent = __webpack_require__(9);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Videos Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends PlaybackContent\n */\nfunction Videos (options) {\n  var overrides = {\n    resource: ResourceTypes.VIDEOS,\n    variants: '/<%=resource%>/<%=id%>/variants',\n    publish: '/<%=resource%>/publish'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  PlaybackContent.call(this, options);\n\n};\n\n// This extends the base class of 'PlaybackContent'.\nVideos.prototype = Object.create(PlaybackContent.prototype);\nVideos.prototype.constructor = Videos;\n\n/**\n * Return a list of the requested videos for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nVideos.prototype.getAll = function (headers, status) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Videos.getAll requires a valid status to be passed as a string.');\n    }\n\n    url = url + '?status=' + status;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Get all of the variants for the supplied video id.\n * @param   {string}    id     Video id.\n * @return  {promise}          A promise which resolves when the request is complete.\n */\nVideos.prototype.getVariants = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource getVariants requires a valid video id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.variants, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Publishes a video based on the server time\n *\n * @param  {array}   ids   An array of video ids to publish\n * @return {promise}       A promise which resolves when the request is complete\n */\nVideos.prototype.publish = function (ids) {\n  var request, url;\n\n  // Check to make sure the ids are in an array\n  if (!Array.isArray(ids) || ids.length === 0) {\n    return utils.promisify(false,\n      'IngestSDK Videos publish requires an array of ids to be passed in.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.publish, {\n    resource: this.config.resource,\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: ids\n  });\n\n  return request.send();\n};\n\n/**\n * Gets the total count of videos.\n *\n * @param {string}  status   - [Optional] A comma seperated string of video statuses to filter by.\n * @param {boolean} _private - [Optional] If true, private videos will be included in the response.\n *\n * @return {promise} A promise which resolves when the request is complete.\n */\nVideos.prototype.count = function (status, _private) {\n  var request, url, isStatusSet;\n\n  isStatusSet = false;\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status and it is a string, use it as the status filter.\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Videos count requires a valid status to be passed as a string.');\n    }\n\n    url += '?status=' + status;\n    isStatusSet = true;\n  }\n\n  // If private videos were requested, add the `private` query parameter to the url.\n  if (_private === true) {\n\n    // If a status has been set, then we need to append the next parameter with '&'.\n    if (isStatusSet) {\n      url += '&';\n    } else {\n      url += '?';\n    }\n\n    url += 'private=true';\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n\nmodule.exports = Videos;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Jobs Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Jobs (options) {\n\n  var overrides = {\n    resource: ResourceTypes.JOBS,\n    progress: '/<%=resource%>/<%=id%>/progress'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nJobs.prototype = Object.create(Resource.prototype);\nJobs.prototype.constructor = Jobs;\n\n/**\n * Creates a new encoding job.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nJobs.prototype.add = function (resource) {\n\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Jobs `add` requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send();\n};\n\n/**\n * Gets the progress of a current encoding job\n *\n * @param  {string}  id The id of the job\n * @return {Promise}    A promise which resolves when the request is complete.\n */\nJobs.prototype.progress = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Jobs `progress` requires `jobId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.progress, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'GET'\n  });\n\n  return request.send();\n};\n\nmodule.exports = Jobs;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Profiles Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Profiles (options) {\n  var overrides = {\n    resource: ResourceTypes.PROFILES\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nProfiles.prototype = Object.create(Resource.prototype);\nProfiles.prototype.constructor = Profiles;\n\n/**\n * Update an existing profile with new content.\n * @param  {object|array} resource  An object or an array of objects representing the profile to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nProfiles.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Profiles update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Profiles;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Inputs Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Inputs (options) {\n\n  var overrides = {\n    resource: ResourceTypes.INPUTS,\n    allWithFilters: '/<%=resource%>?filter=<%=filterChain%>',\n    searchWithFilters: '/<%=resource%>?search=<%=input%>&filter=<%=filterChain%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nInputs.prototype = Object.create(Resource.prototype);\nInputs.prototype.constructor = Inputs;\n\n/**\n * Return a list of Inputs for the current user and network.\n *\n * @param  {object} headers - Object representing headers to apply to the request.\n * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nInputs.prototype.getAll = function (headers, filters) {\n  var request, url, urlTemplate, tokens;\n\n  tokens = { resource: this.config.resource };\n  urlTemplate = this.config.host + this.config.all;\n\n  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n  if (Array.isArray(filters) && filters.length > 0) {\n    tokens.filterChain = filters.join(',');\n    urlTemplate = this.config.host + this.config.allWithFilters;\n  }\n\n  url = utils.parseTokens(urlTemplate, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a subset of Inputs that match the search terms.\n *\n * @param  {string} input   - The search terms to match against.\n * @param  {object} headers - The headers to be passed to the request.\n * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nInputs.prototype.search = function (input, headers, filters) {\n  var url, request, urlTemplate, tokens;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Inputs search requires search input to be passed as a string.');\n  }\n\n  tokens = { resource: this.config.resource, input: encodeURIComponent(input) };\n  urlTemplate = this.config.host + this.config.search;\n\n  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n  if (Array.isArray(filters) && filters.length > 0) {\n    tokens.filterChain = filters.join(',');\n    urlTemplate = this.config.host + this.config.searchWithFilters;\n  }\n\n  url = utils.parseTokens(urlTemplate, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\nmodule.exports = Inputs;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Events Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Events (options) {\n  var overrides = {\n    resource: ResourceTypes.EVENTS,\n    types: '/<%=resource%>/types',\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n};\n\n// This extends the base class of 'Resource'.\nEvents.prototype = Object.create(Resource.prototype);\nEvents.prototype.constructor = Events;\n\n/**\n * Returns a list of the requested events for the current network\n *\n * @param {object} headers      - The headers to apply to the request\n * @param {string} filterStatus - A string of all the statuses to filter by, separated by commas\n * @param {string} filterType   - A string of all the types to filter by, separated by commas\n *\n * @return {Promise}\n */\nEvents.prototype.getAll = function (headers, filterStatus, filterType) {\n  var request, url, filterString;\n\n  filterString = '';\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status filter\n  if (filterStatus) {\n    if (typeof filterStatus !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Events.getAll requires a valid filter status to be passed as a string.');\n    }\n\n    filterString = '?filter=' + filterStatus;\n  }\n\n  if (filterType) {\n    if (typeof filterType !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Events.getAll requires a valid filter type to be passed as a string.');\n    }\n\n    if (!filterString) {\n      filterString = '?resource=' + filterType;\n    } else {\n      filterString = filterString + '&resource=' + filterType;\n    }\n  }\n\n  url += filterString;\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a list of all event types\n *\n * @return {Promise}\n */\nEvents.prototype.getTypes = function () {\n  var url, request;\n\n  url = utils.parseTokens(this.config.host + this.config.types, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n  });\n\n  return request.send();\n};\n\nmodule.exports = Events;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Roles Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Roles (options) {\n  var overrides = {\n    resource: ResourceTypes.ROLES\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nRoles.prototype = Object.create(Resource.prototype);\nRoles.prototype.constructor = Roles;\n\n/**\n * Update an existing role with new content.\n * @param  {object|array} resource  An object or an array of objects representing the role(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nRoles.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Roles update requires a role to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Roles;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Livestreams Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Livestreams (options) {\n  var overrides = {\n    resource: ResourceTypes.LIVESTREAMS,\n    status: '/<%=resource%>/<%=id%>/status',\n    end: '/<%=resource%>/<%=id%>/stop'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n};\n\n// This extends the base class of 'Resource'.\nLivestreams.prototype = Object.create(Resource.prototype);\nLivestreams.prototype.constructor = Livestreams;\n\n/**\n * Return a list of the requested livestreams for the network.\n *\n * @param {object} headers - Object representing headers to apply to the request.\n * @param {string} status  - The status you wish to get for live streams\n *\n * @return {promise}            A promise which resolves when the request is complete.\n */\nLivestreams.prototype.getAll = function (headers, status) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Livestreams.getAll requires a valid status to be passed as a string.');\n    }\n\n    url = url + '?status=' + status;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a livestreams status\n *\n * @param  {string} id - Livestream id.\n *\n * @return {promise} A promise which resolves when the request is complete.\n */\nLivestreams.prototype.getStatus = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Livestream.getStatus requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.status, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Ends a livestream\n *\n * @param {string} id        - The id of the livestream to end\n * @param {string} streamKey - The streamKey for the livestream you wish to end\n *\n * @return {promise} A promise which resolves when the request is complete.\n */\nLivestreams.prototype.end = function (id, streamKey) {\n  var request, url, data;\n\n  if (typeof id !== 'string' || typeof streamKey !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Livestream.end requires a valid id and stream key passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.end, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  data = {\n    stream_key: streamKey\n  };\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Livestreams;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// ingest-sdk.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d96ba7b8a206e8d86759","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/extend/index.js\n// module id = 0\n// module chunks = 0","'use strict';\n\nvar Promise = require('pinkyswear');\nvar extend = require('extend');\n\nvar JWTUtils = require('./JWTUtils');\nvar RequestManager = require('./RequestManager');\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n */\nfunction Request (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET',\n    ignoreAcceptHeader: false,\n    requestProgress: null,\n  };\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  this.maxRetrys = 3;\n  this.retrys = 0;\n};\n\n/**\n * Send the request and return a promise to resolve when the request is complete.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nRequest.prototype.send = function () {\n  this.promise = Promise();\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Add the request to the queue and send it\n    this.makeRequest();\n  } else {\n    this.requestError('Request Error : a url is required to make the request.');\n  }\n\n  // Return the promise. Once complete send of the next request if necessary\n  return this.promise\n    .then(RequestManager._sendNextRequest);\n};\n\n/**\n * Send the request synchronously\n * @param {function} callback Function to call when the request is completed.\n * @return {object} The result of the request.\n */\nRequest.prototype.sendSync = function (callback) {\n\n  if (typeof callback === 'function') {\n    this.callback = callback;\n  }\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Add the request to the queue and send it\n    return this.makeRequest();\n  }\n\n  this.requestError('Request Error : a url is required to make the request.');\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n  if (typeof this.options.requestProgress === 'function') {\n    this.request.upload.onprogress = this.progressEvent.bind(this);\n  }\n};\n\n/**\n * Execute the open and construction of the XMLHttpRequest and its data\n */\nRequest.prototype.makeRequest = function () {\n  var postData = this.preparePostData(this.options.data);\n  var headers = this.options.headers;\n  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  // Set before we apply the headers so it can be overridden on a per request basis.\n  if (!this.options.ignoreAcceptHeader) {\n    this.request.setRequestHeader('Accept', 'application/vnd.ingest.v1+json');\n  }\n\n  if (headers) {\n    this.applyRequestHeaders(headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n\n  }\n\n  // Set the default content type when posting data.\n  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n    this.request.setRequestHeader('Content-Type', 'application/vnd.ingest.v1+json');\n  }\n\n  // If the request should be made synchronously then we don't want to add it to the RequestManager.\n  if (!this.options.async) {\n\n    if (postData.data) {\n      this.request.send(postData.data);\n    } else {\n      this.request.send();\n    }\n\n    if (!this.isValidResponseCode(this.request.status)) {\n      this.requestError('Request Error : invalid response code : ' + this.request.status);\n    }\n\n  } else {\n    // If everything is good lets add it to the queue\n    RequestManager.addRequest([this.request, postData.data]);\n  }\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data,\n    type: 'JSON'\n  };\n\n  // In the case of file uploads, all FormData to be passed to the request.\n  if (data instanceof FormData) {\n    result.type = 'FormData';\n    return result;\n  }\n\n  if (data instanceof Blob) {\n    result.type = 'File';\n    return result;\n  }\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n  }\n\n  return result;\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  if (!this.promise) {\n\n    if (typeof this.callback === 'function') {\n      this.callback(null, this.response);\n    }\n\n    return;\n  }\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.errors, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n  var hasContent = this.request.status !== 202 && this.request.status !== 204;\n\n  // Parse JSON if the result is JSON.\n  if (hasContent && responseType && responseType.indexOf('json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        errors: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {Object | String} message   Error object or error message.\n */\nRequest.prototype.requestError = function (message) {\n  var error;\n\n  // If there isn't a promise, in the case of a synchronous request, handle the error.\n  if (!this.promise) {\n\n    error = new Error(message);\n\n    if (typeof this.callback === 'function') {\n      this.callback(error);\n      return;\n    }\n\n    throw error;\n\n  }\n\n  // Reject the promise.\n  this.promise(false, [{\n    message: message,\n    headers: this.request.getAllResponseHeaders(),\n    statusCode: this.request.status\n  }]);\n};\n\nRequest.prototype.progressEvent = function (e) {\n  if (e.lengthComputable) {\n    this.options.requestProgress(e.loaded, e.total);\n  }\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n  var resp, retryAfterTime;\n\n  retryAfterTime = 1000;\n\n  switch (this.request.readyState) {\n  case 4:\n\n    // If we get a rate limit error, lets just retry the request\n    if (this.request.status === 429 && (this.retrys < this.maxRetrys)) {\n      if (this.request.getResponseHeader('Retry-After')) {\n        retryAfterTime = this.request.getResponseHeader('Retry-After') * 1000;\n      }\n\n      this.retrys++;\n      setTimeout(this.makeRequest.bind(this), retryAfterTime);\n      return;\n    }\n\n    // Check if the final response code is valid\n    if (this.isValidResponseCode(this.request.status)) {\n      return this.requestComplete(this.request.responseText);\n    } else if (this.request.getResponseHeader('Content-Length') === '0') {\n      return this.requestError('Request Error: Invalid response code : ' + this.request.status);\n    }\n\n    // Special case error handling with response body\n    resp = this.processResponse(this.request.response);\n    this.requestError(resp.data);\n    break;\n  default:\n    // Silence is golden\n  }\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {Number}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n * Cancel the current XHR request.\n */\nRequest.prototype.cancel = function () {\n  // Remove the event listener.\n  this.request.onreadystatechange = null;\n  this.request.abort();\n  this.requestError('Request has been canceled.');\n};\n\nmodule.exports = Request;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Request.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nvar Promise = require('pinkyswear');\nvar Utils = {};\n\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nUtils.parseTokens = function (template, hash) {\n  var keys, i, length;\n\n  if (!template) {\n    return null;\n  }\n\n  keys = Object.keys(hash);\n  length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nUtils.promisify = function (state, value) {\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n};\n\n/**\n * Wrap an array of promises and return when they have all completed.\n * @param   {Array}     promises  An array of promises to manage.\n * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n */\nUtils.series = function (promises, paused) {\n\n  var promisesCount = promises.length;\n  var all = Promise();\n\n  var state = {\n    total: promisesCount,\n    complete: 0,\n    responses: [],\n    promises: promises,\n    paused: true\n  };\n\n  all.pause = Utils._seriesPause.bind(undefined, all, state);\n  all.resume = Utils._seriesResume.bind(undefined, all, state);\n  all.cancel = Utils._seriesCancel.bind(undefined, all, state);\n\n  if (!paused) {\n    state.paused = false;\n    Utils._seriesCallPromise(promises[0], state, all);\n  }\n\n  return all;\n\n};\n\n/**\n * Call a promise and pass the complete and error functions.\n * @param  {Promise} promise Promise to execute on.\n * @param  {Object} state   Persistent state of the series of promises.\n */\nUtils._seriesCallPromise = function (promise, state, all) {\n  // Call the promise.\n  if (!state.paused) {\n    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n      Utils._seriesError.bind(undefined, all, state));\n  }\n};\n\n/**\n * Manage the progress of the promises.\n * @private\n * @param  {Promise} all      All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesComplete = function (all, state, response) {\n\n  // Early return if this has been canceled.\n  if (state.canceled) {\n    return;\n  }\n\n  // Increment the complete promises.\n  state.complete++;\n  state.responses.push(response);\n\n  if (state.complete >= state.total) {\n    all(true, state.responses);\n  } else {\n    if (!state.paused) {\n      // Execute the next promise.\n      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n    }\n  }\n\n};\n\n/**\n * Immediately reject the promise if there is an error.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesError = function (all, state, error) {\n  all(false, [error]);\n};\n\n/**\n * Pause the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesPause = function (all, state) {\n  state.paused = true;\n};\n\n/**\n * Resume the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesResume = function (all, state) {\n  state.paused = false;\n\n  if (state.complete !== state.total) {\n    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n  }\n};\n\n/**\n * Resolve the promise but return an empty response.\n * @param  {Promise}  all     All promise.\n * @param  {Object}   state   State object used to persist the promise count.\n */\nUtils._seriesCancel = function (all, state) {\n  state.canceled = true;\n  all(true, []);\n};\n\n/**\n * Return true if a file provided matches a support image type.\n * @param  {file}     file  A reference to an image file.\n * @return {Boolean}        True if the type matches a known image type.\n */\nUtils.isImage = function (file) {\n  return file.type.indexOf('image') !== -1;\n};\n\nmodule.exports = Utils;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Utils.js\n// module id = 2\n// module chunks = 0","'use strict';\n\nvar extend = require('extend');\nvar Request = require('../Request');\nvar utils = require('../Utils');\n\n/**\n * Abstract Resource Class\n *\n * @param {object} options - SDK Options.\n * @class\n */\nfunction Resource (options) {\n\n  this.defaults = {\n    host: 'https://api.ingest.io',\n    all: '/<%=resource%>',\n    byId: '/<%=resource%>/<%=id%>',\n    trash: '/<%=resource%>?status=trashed',\n    deleteMethods: {\n      'permanent': '?permanent=1'\n    },\n    search: '/<%=resource%>?search=<%=input%>',\n    tokenSource: null,\n    resource: null\n  };\n\n  this.config = extend(true, {}, this.defaults, options);\n}\n\n/**\n * Proxy the request to token source to ensure a value is always returned.\n * @private\n * @return {string} Auth token.\n */\nResource.prototype._tokenSource = function () {\n  var result = null;\n\n  if (this.config.tokenSource) {\n    result = this.config.tokenSource.call();\n  }\n\n  return result;\n};\n\n/**\n * Return a list of the requested resource for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.getAll = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a resource that matches the supplied id.\n * @param  {string}   id    Resource id.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nResource.prototype.getById = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string' || id.length <= 0) {\n    return utils.promisify(false,\n      'IngestSDK Resource getById requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Return the resources currently in the trash.\n * @param  {object} headers Headers to be passed along with the request for pagination.\n * @return {promise}         A promise which resolves when the request is complete.\n */\nResource.prototype.getTrashed = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Add a new resource.\n * @param   {object}  resource  An object representing the resource to add.\n * @return  {promise}           A promise which resolves when the request is complete.\n */\nResource.prototype.add = function (resource) {\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Resource add requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send();\n};\n\n/**\n * Update an existing resource with new content.\n * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nResource.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Resource update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Delete an existing resource\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.delete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, false, async);\n};\n\n/**\n * Permanently delete an existing resource.\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.permanentDelete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, true, async);\n};\n\n/**\n * Delete a single resource\n * @private\n * @param   {object}    resource    The id of the resource to be deleted.\n * @param   {boolean}   permanent   A flag to permanently delete each video.\n * @return  {promise}               A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResource = function (resource, permanent) {\n  var request;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Delete an existing resource\n * @param  {string}     resource    The id for the resource to be deleted.\n * @param  {function}   callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype.deleteSync = function (resource, callback) {\n\n  if (typeof resource !== 'string') {\n    callback(new Error('IngestSDK Resource delete requires a resource to be passed as a string.'));\n    return;\n  }\n\n  this._deleteResourceSync(resource, false, callback);\n\n};\n\n/**\n * Permanently delete an existing resource.\n * @param   {string}    resource    The id for the resource to be deleted.\n * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype.permanentDeleteSync = function (resource, callback) {\n\n  if (typeof resource !== 'string') {\n    callback(new Error('IngestSDK Resource delete requires a resource to be passed as a string.'));\n    return;\n  }\n\n  this._deleteResourceSync(resource, true, callback);\n\n};\n\n/**\n * Delete a single resource synchronously\n * @private\n * @param   {object}    resource    The id of the resource to be deleted.\n * @param   {boolean}   permanent   A flag to permanently delete each video.\n * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype._deleteResourceSync = function (resource, permanent, callback) {\n  var request;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    async: false,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  request.sendSync(callback);\n};\n\n/**\n * Return a subset of items that match the search terms.\n * @param  {string}   input     The search terms to match against.\n * @param  {object}   headers   The headers to be passed to the request.\n * @param  {boolean}  trash     Should we be searching the trash.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.search = function (input, headers, status) {\n  var url, request;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource search requires search input to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.search, {\n    resource: this.config.resource,\n    input: encodeURIComponent(input)\n  });\n\n  // If there is a status and it\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Resource search requires a valid status to be passed as a string.');\n    }\n\n    url = url + '&status=' + status;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a subset of items that match the search terms in the trash.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.searchTrash = function (input, headers) {\n  return this.search(input, headers, 'trashed');\n};\n\n/**\n * Get the total count of resources.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.count = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n/**\n * Get the total count of resources in the trash.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.trashCount = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n/**\n * Return the resource count from the response.\n * @private\n * @param  {object} response Request response object.\n * @return {number}          The resource count.\n */\nResource.prototype._handleCountResponse = function (response) {\n  return parseInt(response.headers('Resource-Count'), 10);\n};\n\nmodule.exports = Resource;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Resource.js\n// module id = 3\n// module chunks = 0","'use strict';\n\n/**\n * Constants for our resource types\n */\nmodule.exports = {\n  'EVENTS': 'events',\n  'INPUTS': 'encoding/inputs',\n  'JOBS': 'encoding/jobs',\n  'NETWORKS': 'networks',\n  'PROFILES': 'encoding/profiles',\n  'ROLES': 'roles',\n  'USERS': 'users',\n  'VIDEOS': 'videos',\n  'LIVESTREAMS': 'live'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/constants/resourceTypes.js\n// module id = 4\n// module chunks = 0","/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([], factory);\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.pinkySwear = factory();\n\t}\n}(this, function() {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\treturn function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n}));\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pinkyswear/pinkyswear.js\n// module id = 5\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process/browser.js\n// module id = 6\n// module chunks = 0","'use strict';\n\n/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nfunction parseTokenPayload (token) {\n  var payload;\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // Decode the payload portion.\n  payload = window.atob(parts[1]);\n\n  // Parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/JWTUtils.js\n// module id = 7\n// module chunks = 0","'use strict';\n\n/**\n * Manages request objects in a queueing system\n */\nfunction RequestManager () {\n  this.pending = [];\n  this.activeRequests = 0;\n  this.currentSetRequests = 0;\n  this.lastRequestSetStart = null;\n  this.resetTimer = null;\n\n  this._sendNextRequest = this.sendNextRequest.bind(this);\n  this._resetCurrentSet = this.resetCurrentSet.bind(this);\n};\n\n/**\n * Sets the max requests for the Request Manager\n *\n * @param {number} maxRequests - The maximum allowed requests at one time\n */\nRequestManager.prototype.setMaxRequests = function (maxRequests) {\n  this.maxRequests = maxRequests;\n};\n\n/**\n * Resets the current set and sets the last request start to the passed in value\n *\n * @param {any} newDate - The new date timestamp or null\n */\nRequestManager.prototype.resetCurrentSet = function (newDate) {\n  this.currentSetRequests = 0;\n  this.lastRequestSetStart = newDate;\n};\n\n/**\n * Sends a request or adds it to the queue if it can't be sent\n *\n * @param {array} requestData - The request object and request data in an array\n *\n * @return\n */\nRequestManager.prototype.addRequest = function (requestData) {\n  // If we have too many out then queue the request\n  if (this.activeRequests >= this.maxRequests) {\n    this.pending.push(requestData);\n    return;\n  }\n\n  // Otherwise send the request\n  this.sendRequest(requestData[0], requestData[1]);\n};\n\n/**\n * Sends the request\n *\n * @param {object} request - The request object\n * @param {object} data    - The request data\n */\nRequestManager.prototype.sendRequest = function (request, data) {\n\n  // If there is a reset timer, we need to clear it so its not run\n  if (this.resetTimer) {\n    clearTimeout(this.resetTimer);\n  }\n\n  // If this request is the start of a set, lets reset the set data\n  if (this.currentSetRequests % this.maxRequests === 0) {\n    this.resetCurrentSet(Date.now());\n  }\n\n  // Increment counters\n  this.activeRequests++;\n  this.currentSetRequests++;\n\n  // Send data\n  if (data) {\n    request.send(data);\n  } else {\n    request.send();\n  }\n};\n\n/**\n * Sends the next available request if applicable\n *\n * @param {object}  response - The http response data\n *\n * @return {object} response - The http response data\n */\nRequestManager.prototype.sendNextRequest = function (response) {\n  var XRatelimitRemaining, moreRequests, requestData, delay;\n\n  // Deincrement counter\n  this.activeRequests--;\n\n  // No more to send, reset data if enough time passes\n  if (this.pending.length === 0) {\n\n    // If i don't have a timer already and have no active requests\n    if (!this.resetTimer && this.activeRequests === 0) {\n      // Set the reset timer so new calls are in sync\n      this.resetTimer = setTimeout(this._resetCurrentSet, this.XRatelimitLimit * 1000);\n    }\n\n    // Return response\n    return response;\n  }\n\n  // Only run the first time to get the limits\n  if (!this.XRatelimitReset) {\n    // Set the reset and the limit\n    this.XRatelimitReset = response.headers('X-Ratelimit-Reset');\n    this.XRatelimitLimit = response.headers('X-Ratelimit-Limit');\n\n    // If the limit returned from the server is less than the set max limit, lets override it\n    if (this.XRatelimitLimit < this.maxRequests) {\n      this.maxRequests = this.XRatelimitLimit;\n    }\n  }\n\n  // Get my next request and requests remaining\n  requestData = this.pending.shift();\n  XRatelimitRemaining = response.headers('X-Ratelimit-Remaining');\n\n  // See if I can send more requests right now\n  moreRequests = (this.activeRequests < this.maxRequests) && (XRatelimitRemaining > 0);\n\n  // If I can send more requests send them\n  if (moreRequests) {\n    this.sendRequest(requestData[0], requestData[1]);\n  } else {\n    // Otherwise lets delay so these get sent in the next tick\n    delay = (Date.now() - this.lastRequestSetStart) < 100 ? 100 : (Date.now() - this.lastRequestSetStart);\n\n    // Delay the call of the next send request\n    setTimeout(this.sendRequest.bind(this, requestData[0], requestData[1]), delay);\n  }\n\n  // Return the response\n  return response;\n};\n\nmodule.exports = new RequestManager();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/RequestManager.js\n// module id = 8\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\n/**\n * Abstract PlaybackContent Class\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction PlaybackContent (options) {\n\n  var overrides = {\n    thumbnail: '/<%=resource%>/<%=id%>/thumbnail',\n    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n    deleteThumbnail: '/<%=resource%>/<%=id%>/thumbnail/<%=thumbnailId%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nPlaybackContent.prototype = Object.create(Resource.prototype);\nPlaybackContent.prototype.constructor = PlaybackContent;\n\n/**\n * Retrieve all thumbnails for a provided resource id.\n * @param {string}    id    ID of the resource to retrieve thumbnails for.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.getThumbnails = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent getThumbnails requires an id to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}          id      ID of the resource to add the external thumbnails to.\n * @param   {string|array}    images  A path to the image, or an array of image paths.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.addExternalThumbnails = function (id, images) {\n\n  var url, request;\n\n  var imagesToAdd = [];\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent addExternal requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!Array.isArray(images) && typeof images !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent addExternal requires images as a string or an array of strings.');\n  }\n\n  // If we already have an array replace the outgoing array, otherwise push the image path to the array.\n  // This ensures we are always passing an array.\n  if (Array.isArray(images)) {\n    imagesToAdd = images;\n  } else {\n    imagesToAdd.push(images);\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: imagesToAdd\n  });\n\n  return request.send();\n\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}        id        ID of the resource to add the external thumbnails to.\n * @param   {file}          image     A JavaScript File interface representing the image to upload.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.uploadThumbnail = function (id, image) {\n\n  var request, url, formData;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent uploadThumbnail requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!image || !(image instanceof File) || !utils.isImage(image)) {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent uploadThumbnail requires a valid image.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnail, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  // Create a new FormData object so the request is properly sent as multipart.\n  formData = new FormData();\n  formData.append('image', image);\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: formData\n  });\n\n  return request.send();\n\n};\n\n/**\n * Remove an external thumbnail image.\n *\n * @param   {string}    id            ID of the resource to remove the thumbnail from.\n * @param   {string}    thumbnailId   ID of the thumbnail to remove from the resource.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.deleteThumbnail = function (id, thumbnailId) {\n\n  var request, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent deleteThumbnail requires an id to be passed as a string.');\n  }\n\n  if (typeof thumbnailId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent deleteThumbanil requires a thumbnailId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.deleteThumbnail, {\n    resource: this.config.resource,\n    id: id,\n    thumbnailId: thumbnailId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n\n};\n\nmodule.exports = PlaybackContent;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/PlaybackContent.js\n// module id = 9\n// module chunks = 0","'use strict';\n\nvar extend = require('extend');\nvar Request = require('./Request');\nvar JWTUtils = require('./JWTUtils');\nvar utils = require('./Utils');\nvar Uploader = require('./Uploader');\nvar RequestManager = require('./RequestManager');\n\nvar Resource = require('./resources/Resource');\nvar Media = require('./resources/PlaybackContent');\nvar Users = require('./resources/Users');\nvar Networks = require('./resources/Networks');\nvar Videos = require('./resources/Videos');\nvar Jobs = require('./resources/Jobs');\nvar Profiles = require('./resources/Profiles');\nvar Inputs = require('./resources/Inputs');\nvar Events = require('./resources/Events');\nvar Roles = require('./resources/Roles');\nvar Livestreams = require('./resources/Livestreams');\n\n/**\n * IngestAPI Object\n * @class\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestSDK (options) {\n  var resourceConfig;\n\n  this.defaults = {\n    'maxRequests': 6, // Active Requests\n    'host': 'https://api.ingest.io'\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.token = null;\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  /* Exposed for testing */\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n  this.utils = utils;\n  this.resource = Resource;\n  this.playbackContent = Media;\n  this.usersResource = Users;\n  this.networksResource = Networks;\n  this.videosResource = Videos;\n  this.jobsResource = Jobs;\n  this.profilesResource = Profiles;\n  this.inputsResource = Inputs;\n  this.uploader = Uploader;\n  this.eventsResource = Events;\n  this.rolesResource = Roles;\n  this.livestreamsResource = Livestreams;\n\n  // Set my max requests\n  this.requestManager = RequestManager;\n  this.setMaxRequests(this.config.maxRequests);\n\n  resourceConfig = {\n    host: this.config.host,\n    tokenSource: this.getToken.bind(this)\n  };\n\n  this.videos = new Videos(resourceConfig);\n  this.inputs = new Inputs(resourceConfig);\n  this.users = new Users(resourceConfig);\n  this.networks = new Networks(resourceConfig);\n  this.profiles = new Profiles(resourceConfig);\n  this.jobs = new Jobs(resourceConfig);\n  this.events = new Events(resourceConfig);\n  this.roles = new Roles(resourceConfig);\n  this.livestreams = new Livestreams(resourceConfig);\n}\n\n/** Token **/\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestSDK.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (typeof token !== 'string') {\n    throw new Error('IngestSDK requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n};\n\n/**\n * Sets the maxrequests in the Request Manager\n * @param {number} max - The max amount of requests at once\n */\nIngestSDK.prototype.setMaxRequests = function (max) {\n  // Make sure we have a valid number.\n  if (typeof max !== 'number' || max < 1) {\n    throw new Error('IngestSDK requires a maxRequest count to be passed as a positive number.');\n  }\n\n  RequestManager.setMaxRequests(max);\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token, or null if a token has not been set.\n */\nIngestSDK.prototype.getToken = function () {\n  return this.token;\n};\n\n/**\n * Create a new input and upload a file.\n * @param  {File}   file    File to upload.\n * @return {Promise} A promise which resolves when the upload is complete.\n */\nIngestSDK.prototype.upload = function (file) {\n  return new Uploader({\n    file: file,\n    api: this,\n    host: this.config.host\n  });\n};\n\nmodule.exports = IngestSDK;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 10\n// module chunks = 0","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/timers-browserify/main.js\n// module id = 11\n// module chunks = 0","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/setimmediate/setImmediate.js\n// module id = 12\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 13\n// module chunks = 0","'use strict';\n\nvar extend = require('extend');\nvar Request = require('./Request');\nvar Promise = require('pinkyswear');\nvar utils = require('./Utils');\n\n/**\n * Create a new upload wrapper.  Manages the entire upload of a file.\n * @class\n * @param   {object}  options                   Configuration options to override the defaults.\n * @param   {object}  options.api               A reference to the parent API instance.\n * @param   {object}  options.file              The file to upload.\n * @param   {object}  options.upload            REST endpoint for creating an input.\n * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n */\nfunction Upload (options) {\n\n  this.defaults = {\n    api: null,\n    file: null,\n    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n    uploadMethods: {\n      param: '?type=',\n      singlePart: 'amazon',\n      multiPart: 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.api = this.config.api;\n  this.file = this.config.file;\n\n  this.chunks = [];\n  this.chunkSize = 0;\n  this.chunkCount = 0;\n  this.chunksComplete = 0;\n  this.uploadedBytes = 0;\n\n  this.aborted = false;\n  this.paused = false;\n  this.created = false;\n  this.initialized = false;\n\n  // Set to true when all the chunks are uploaded, but before the complete call is made.\n  this.uploadComplete = false;\n\n  this.fileRecord = {\n    filename: this.file.name,\n    type: this.file.type,\n    size: this.file.size,\n    method: this._checkMultipart(this.file),\n    contentType: 'application/octet-stream'\n  };\n\n};\n\n/**\n * Register a function to execute when a chunk completes uploading.\n * @param  {Function} callback A callback to execute when progress is made.\n */\nUpload.prototype.progress = function (callback) {\n  this.config.progress = callback.bind(this);\n};\n\n/**\n * Create a new input record and upload the files to amazon.\n * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n */\nUpload.prototype.save = function () {\n  return this._create(this.fileRecord)\n    .then(this._initialize.bind(this))\n    .then(this._prepareUpload.bind(this));\n};\n\n/**\n * Call the progress callback and pass the current progress percentage.\n * @private\n * @param  {number} message Current progress percentage.\n */\nUpload.prototype._updateProgress = function (percent, chunkSize) {\n\n  if (!this.config.progress) {\n    return;\n  }\n\n  this.config.progress.call(this, percent, chunkSize);\n};\n\n/**\n * Create a new input record.\n * @private\n * @param   {object}  record  A JSON object representing the input record to create.\n * @return  {Promise}         A promise which resolves when the new input record is created.\n */\nUpload.prototype._create = function (record) {\n\n  if (this.created) {\n    return utils.promisify(true, this.fileRecord.id);\n  }\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  return this.api.inputs.add(record).then(this._createSuccess.bind(this));\n};\n\n/**\n * Return the data object from the response.\n * @private\n * @param  {JSON}   response  JSON response containing the new input record id.\n * @return {string}           new input record id.\n */\nUpload.prototype._createSuccess = function (response) {\n\n  this.created = true;\n\n  this._updateProgress(0, 0);\n\n  // Store the input record.\n  this.input = response.data;\n\n  this.fileRecord.id = response.data.id;\n\n  return this.fileRecord.id;\n};\n\n/**\n * Initializes an Input for upload\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._initialize = function () {\n  var url;\n  var tokens;\n  var signing = '';\n  var request;\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._initializeComplete.bind(this));\n\n};\n\n/**\n * Store the information returned from the initialize request.\n * @private\n */\nUpload.prototype._initializeComplete = function (response) {\n  this.initialized = true;\n  this.fileRecord.key = response.data.key;\n  this.fileRecord.uploadId = response.data.uploadId;\n  this.chunkSize = response.data.pieceSize;\n  this.chunkCount = response.data.pieceCount;\n};\n\n/**\n * Setup the upload depending on its type, single or multi part.\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._prepareUpload = function () {\n  if (!this.fileRecord.method) {\n    // Singlepart.\n    return this._uploadFile()\n      .then(this._onCompleteUpload.bind(this));\n  }\n\n  // Multipart.\n  return this._createChunks()\n    .then(this._completeUpload.bind(this));\n};\n\n/**\n * Break a file into blobs and create a chunk object for each piece.\n * @private\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._createChunks = function () {\n  var sliceMethod = this._getSliceMethod(this.file);\n  var i, blob, chunk, start, end,\n    chunkPromises = [];\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  for (i = 0; i < this.chunkCount; i++) {\n\n    start = i * this.chunkSize;\n    // Choose the smaller value, so that we don't go over the filesize.\n    end = Math.min((i + 1) * this.chunkSize, this.fileRecord.size);\n\n    blob = this.file[sliceMethod](start, end);\n\n    chunk = {\n      partNumber: i + 1,\n      data: blob\n    };\n\n    this.chunks.push(chunk);\n\n    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\n  }\n\n  // Store a reference for pausing and resuming.\n  this.multiPartPromise = utils.series(chunkPromises, this.paused);\n\n  return this.multiPartPromise;\n};\n\n/**\n * Create a promise chain for each chunk to be uploaded.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadChunk = function (chunk) {\n  var promise = Promise();\n\n  // Break the promise chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._completeChunk.bind(this, chunk, promise));\n\n  return promise;\n};\n\n/**\n * Create a promise chain for a single part file upload.\n * @param  {file}   file    A file reference to upload.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadFile = function () {\n  var chunk = {\n    data: this.file\n  };\n\n  // Create a new promise if one doesn't exist.\n  if (!this.singlePartPromise) {\n    this.singlePartPromise = Promise();\n  }\n\n  // Broken off the chain, this will allow us to cancel single part uploads without breaking the\n  // initial chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._sendSinglepartComplete.bind(this))\n    .then(this._updateProgress.bind(this, 100, this.fileRecord.size))\n    .then(this._uploadFileComplete.bind(this));\n\n  return this.singlePartPromise;\n};\n\n/**\n *  Resolve the single part upload promise;\n */\nUpload.prototype._uploadFileComplete = function () {\n  this.singlePartPromise(true, []);\n};\n\n/**\n * Make a request and sign the chunk to be uploaded.\n * @private\n * @param  {object}   chunk           Information about the chunk to be uploaded.\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nUpload.prototype._signUpload = function (chunk) {\n  var url;\n  var signing = '';\n  var headers = {};\n  var request;\n\n  // Set the part number for the current chunk.\n  if (chunk.partNumber) {\n    this.fileRecord.partNumber = chunk.partNumber;\n  }\n\n  headers['Content-Type'] = 'multipart/form-data';\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n    id: this.fileRecord.id,\n    method: signing\n  });\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    headers: headers,\n    data: this.fileRecord\n  });\n\n  return request.send();\n};\n\n/**\n * Send the upload to the server.\n * @private\n * @param   {object} upload  An object representing the upload to send to the server.\n * @return  {Promise}       A promise which resolves when the request is complete.\n */\nUpload.prototype._sendUpload = function (upload, response) {\n  var headers = {};\n  var request;\n\n  // Set the proper headers to send with the file.\n  headers['Content-Type'] = this.fileRecord.contentType;\n\n  headers.authorization = response.data.authHeader;\n  headers['x-amz-date'] = response.data.dateHeader;\n  headers['x-amz-security-token'] = response.data.securityToken;\n\n  request = new Request({\n    url: response.data.url,\n    method: 'PUT',\n    headers: headers,\n    data: upload.data,\n    ignoreAcceptHeader: true,\n    requestProgress: this._requestProgress.bind(this),\n  });\n\n  this.requestPromise = request;\n\n  return request.send();\n};\n\n/**\n * Update the progress of requestProgress\n */\nUpload.prototype._requestProgress = function (uploadedBytes, totalBytes) {\n  var progress;\n\n  // BUGWATCH: if we change this to upload multiple chunks at once this will have to be written\n  // other chunks completed data + the current chunk in the request\n  progress = (this.uploadedBytes + uploadedBytes) / this.fileRecord.size;\n  progress *= 99;\n  progress = Math.round(progress);\n\n  this._updateProgress(progress, totalBytes);\n};\n\n/**\n * Update the upload bytes value when a single part file is uploaded.\n */\nUpload.prototype._sendSinglepartComplete = function () {\n  this.uploadComplete = true;\n  this.uploadedBytes = this.fileRecord.size;\n};\n\n/**\n *  Executed when a chunk is finished uploading.\n *  @private\n *  @param {object}   chunk   The current chunk that was uploaded.\n *  @param {Promise}  promise The promise to resolve when the chunk is complete.\n */\nUpload.prototype._completeChunk = function (chunk, promise) {\n  this.chunksComplete++;\n  chunk.complete = true;\n  this.uploadedBytes += chunk.data.size;\n\n  // Upload is complete.\n  if (this.chunksComplete === this.chunkCount) {\n    this.uploadComplete = true;\n  }\n\n  // Resolve the promise.\n  promise(true, []);\n};\n\n/**\n * Notify the server that the upload is complete.\n *\n * @private\n * @return  {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._completeUpload = function () {\n  var url;\n  var tokens;\n  var request;\n\n  // Early return so we don't process any of the complete information on an aborted upload.\n  if (this.aborted) {\n    return utils.promisify(false, 'Upload Aborted.');\n  }\n\n  tokens = {\n    id: this.fileRecord.id\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._onCompleteUpload.bind(this));\n};\n\n/**\n * Return the id for the current file record.\n * @private\n * @return {string} ID for the input record that was created.\n */\nUpload.prototype._onCompleteUpload = function () {\n  // Send the final progress update once the upload is actually complete.\n  this._updateProgress(100);\n\n  this.uploadComplete = true;\n  this.multiPartPromise = null;\n  this.requestPromise = null;\n  this.singlePartPromise = null;\n  return this.fileRecord.id;\n};\n\n/**\n * Aborts an input upload\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype.abort = function () {\n  var url;\n  var tokens;\n  var request;\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early with a\n      // promise to delete the created input record.\n      return this.api.inputs.delete(this.fileRecord.id);\n    }\n\n    // Resolve as a successful promise. This case would be fulfilled when an upload\n    // has been created but save() hasn't yet been called.\n    return utils.promisify(true);\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singlePartPromise = null;\n    // Return here because there is no need to abort a single part upload.\n    return this._abortComplete();\n  }\n\n  if (this.multiPartPromise) {\n    this.multiPartPromise.cancel();\n    this.multiPartPromise = null;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n    .then(this._abortComplete.bind(this));\n\n};\n\n/**\n * Aborts an input upload\n * @param {function} callback Callback executed when the request is complete, or an error occurs.\n */\nUpload.prototype.abortSync = function (callback) {\n  var url;\n  var tokens;\n  var request;\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early and delete the input.\n      this.api.inputs.deleteSync(this.fileRecord.id, callback);\n      return;\n    }\n\n    // Resolve as a successful promise. This case would be fulfilled when an upload\n    // has been created but save() hasn't yet been called.\n    callback(null);\n    return;\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singlePartPromise = null;\n    // Return here because there is no need to abort a single part upload.\n    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n    return;\n  }\n\n  // If we have a multi part promise we need to cancel it\n  if (this.multiPartPromise) {\n    this.multiPartPromise.cancel();\n    this.multiPartPromise = null;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    async: false,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  request.sendSync(this.abortSyncComplete.bind(this, callback));\n};\n\n/**\n * Delete the input when the abort call completes and then execute the callback.\n *\n * @param {Function} callback - Synchronous callback\n * @param {object}   error    - Error from abort call.\n */\nUpload.prototype.abortSyncComplete = function (callback, error) {\n\n  if (!error) {\n    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n  } else if (typeof callback === 'function') {\n    callback(error);\n  } else {\n    throw error;\n  }\n\n};\n\n/**\n * Delete the input that was created.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._abortComplete = function () {\n  return this.api.inputs.delete(this.fileRecord.id);\n};\n\n/**\n * Pause the current upload.\n */\nUpload.prototype.pause = function () {\n  // Return early if the upload portion is complete.\n  // The work is done by now so we might as well fire the\n  // complete call.\n  if (this.uploadComplete) {\n    return;\n  }\n\n  this.paused = true;\n\n  // Is there a multipart upload\n  if (this.multiPartPromise) {\n    // Pause the series if its a multipart upload.\n    this.multiPartPromise.pause();\n  }\n\n  // Abort the upload if its a singlepart upload and cancel the request if it is a multipart promise\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n  }\n};\n\n/**\n * Resume the current upload.\n */\nUpload.prototype.resume = function () {\n  this.paused = false;\n\n  if (this.multiPartPromise) {\n    // Resume the series if it's multipart.\n    this.multiPartPromise.resume();\n  } else if (this.requestPromise) {\n    // Restart the file upload.\n    this._uploadFile();\n  }\n\n};\n\n/**\n * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n * @private\n *\n * @param {File} file - The file to evaluate.\n *\n * @return {boolean} - True if the file will be uploading using mutlipart upload.\n */\nUpload.prototype._checkMultipart = function (file) {\n  if (!file) {\n    throw new Error('Upload::_checkMultipart - A file object is required.');\n  }\n\n  return file.size > (5 * 1024 * 1024);\n};\n\n/**\n * Function that determines the slice method to be used\n * @private\n * @param {object} file - The file object you wish to determine the slice method for\n * @return {string} sliceMethod - The slice method to use.\n */\nUpload.prototype._getSliceMethod = function (file) {\n  var sliceMethod;\n\n  if ('mozSlice' in file) {\n    sliceMethod = 'mozSlice';\n  } else if ('webkitSlice' in file) {\n    sliceMethod = 'webkitSlice';\n  } else {\n    sliceMethod = 'slice';\n  }\n\n  return sliceMethod;\n};\n\nmodule.exports = Upload;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Uploader.js\n// module id = 14\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Users Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Users (options) {\n\n  var overrides = {\n    resource: ResourceTypes.USERS,\n    currentUser: '/users/me',\n    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n    updateRoles: '/users/<%=id%>/roles',\n    revoke: '/revoke'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nUsers.prototype = Object.create(Resource.prototype);\nUsers.prototype.constructor = Users;\n\n/**\n * Retrieve information for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.getCurrentUserInfo = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Transfer all authorship currently under the specified user onto another.\n * This includes all videos.\n * This task is commonly used in conjunction with permanently deleting a user.\n *\n * @param {string} oldId - The user who currently has authorship.\n * @param {string} newId - The user to transfer authorship to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n  var tokens, url, request;\n\n  if (typeof oldId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK transferUserAuthorship requires `oldId` to be passed as a string.');\n  }\n\n  if (typeof newId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK transferUserAuthorship requires `newId` to be passed as a string');\n  }\n\n  tokens = {\n    oldId: oldId,\n    newId: newId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Revokes the authorization token for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.revokeCurrentUser = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser + this.config.revoke,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Updates a user with the passed in roles\n *\n * @param {string} id      - The id of the user to update their roles\n * @param {array}  roleIDs - The role ids of the roles you wish to assign to the user\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.updateUserRoles = function (id, roleIDs) {\n  var request, url, data;\n\n  if (!Array.isArray(roleIDs) || roleIDs.length < 1) {\n    return utils.promisify(false,\n      'IngestSDK updateUserRoles requires `roleIDs` to be passed as an array.');\n  }\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK updateUserRoles requires `id` to be passed as a string.');\n  }\n\n  // Get the url\n  url = utils.parseTokens(this.config.host + this.config.updateRoles, {\n    id: id\n  });\n\n  // Set the data into a structure the api can use it\n  data = {\n    role_ids: roleIDs\n  };\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Users;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Users.js\n// module id = 15\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Networks Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Networks (options) {\n\n  var overrides = {\n    resource: ResourceTypes.NETWORKS,\n    keys: '/<%=resource%>/<%=networkId%>/keys',\n    keysById: '/<%=resource%>/<%=networkId%>/keys/<%=keyId%>',\n    invite: '/<%=resource%>/<%=networkId%>/invite',\n    invoices: '/<%=resource%>/<%=networkId%>/invoices',\n    invoicesById: '/<%=resource%>/<%=networkId%>/invoices/<%=invoiceId%>',\n    currentUsage: '/<%=resource%>/<%=networkId%>/invoices?currentUsage=true',\n    customers: '/<%=resource%>/<%=networkId%>/customers',\n    customerById: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>',\n    customerCardInformation: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>/card',\n    getPendingUsers: '/<%=resource%>/<%=networkId%>?filter=pending',\n    deletePendingUser: '/<%=resource%>/<%=networkId%>/pending-users/<%=pendingUserId%>',\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nNetworks.prototype = Object.create(Resource.prototype);\nNetworks.prototype.constructor = Networks;\n\n/**\n * Link an existing user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to link.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.linkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK linkUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK linkUser requires `userId` to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'LINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Removes the specified user from the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to unlink.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.unlinkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK unlinkUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK unlinkUser requires `userId` to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'UNLINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Invites a user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  email      The email to send the invite to.\n * @param {string}  name       The name of the person to invite.\n * @param {boolean} resend     [Optional] True: Resend an invite. False for first time invite. Default value is false.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.inviteUser = function (networkId, email, name, resend) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof email !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `email` to be passed as a string.');\n  }\n\n  if (typeof name !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `name` to be passed as a string.');\n  }\n\n  data = {\n    email: email,\n    name: name\n  };\n\n  if (typeof resend === 'boolean') {\n    data.resend = resend;\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invite, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a list of all secure keys for the network given.\n *\n * @param {string}  networkId  The unique ID of the network.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeys = function (networkId) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeys requires `networkId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Adds a new secure key to the specified network.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.addSecureKey = function (networkId, data) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires `data` to be passed as an object.');\n  }\n\n  if (typeof data.key !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Retrieves a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeyById = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeyById requires a `networkId` to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeyById requires a `keyId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an individual secure key entry in the network specified.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.updateSecureKey = function (networkId, data) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires `data` to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires param `data.id` to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: data.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteSecureKey = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deleteSecureKeyById requires a `networkId` to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deleteSecureKeyById requires a `keyId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Creates a Stripe customer for the given network ID.\n *\n * @param {string} stripeToken - The Stripe token to reference submitted payment details.\n * @param {string} networkId   - The network UUID for this Stripe customer.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.createCustomer = function (stripeToken, networkId) {\n  var url, request, data;\n\n  if (typeof stripeToken !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks createCustomer requires stripeToken and networkId to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customers, {\n    networkId: networkId,\n    resource: this.config.resource\n  });\n\n  data = {\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an existing Stripe customer for the given network ID.\n *\n * @param {string} networkId   - The networkID that this Stripe customer belongs to.\n * @param {string} cusId       - The Stripe customer ID you wish to update.\n * @param {string} networkName - [Optional] Only provide if you wish to update the network name on the Stripe customer.\n * @param {string} stripeToken - [Optional] Provide only if payment details have been updated.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.updateCustomer = function (networkId, cusId, networkName, stripeToken) {\n  var url, request, data;\n\n  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks updateCustomer requires `networkId` and `cusID` to be a string.');\n  }\n\n  if (typeof networkName !== 'string' && typeof stripeToken !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks updateCustomer requires either networkName or stripeToken passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: cusId\n  });\n\n  data = {\n    networkName: networkName,\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes an existing Stripe customer for the given network ID.\n *\n * @param {string} networkId - The network ID that the customer belongs to.\n * @param {string} cusId     - The Stripe customer ID to be deleted.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.deleteCustomer = function (networkId, cusId) {\n\n  var url, request;\n\n  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks deleteCustomer requires `networkId` and `cusId` to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: cusId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Gets a customers card information on file\n *\n * @param {string} customerId - The customer ID you wish to get the information for.\n * @param {string} networkId  - The network ID the customer belongs to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getCustomerCardInformation = function (networkId, customerId) {\n  var url, request;\n\n  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks getCustomerCardInformation requires networkId and customerId to be strings');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: customerId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Remove the credit card currently associated with the proviced customer.\n * @param {string} networkId  - The network ID the customer belongs to.\n * @param {string} networkId  - The customer ID.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteCustomerCard = function (networkId, customerId) {\n  var url, request;\n\n  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks deleteCustomerCard requires networkId and customerId to be strings');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: customerId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a networks invoices\n *\n * @param {string} networkId  - The network ID that you wish to get the invoices for.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getInvoices = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false, 'IngestSDK Networks getInvoices requires networkId to be a string');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invoices, {\n    resource: this.config.resource,\n    networkId: networkId,\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a specific invoice for a network\n *\n * @param {string} networkId  - The network ID the customer belongs to.\n * @param {string} invoiceId  - The invoice ID you wish to get the information for.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getInvoiceById = function (networkId, invoiceId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getInvoiceById requires networkId to be passed as a string.');\n  }\n\n  if (typeof invoiceId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getInvoiceById requires invoiceId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invoicesById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    invoiceId: invoiceId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets current usage for a network\n *\n * @param {string} networkId  - The network ID the customer belongs to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getCurrentUsage = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getCurrentUsage requires networkId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.currentUsage, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets all pending users for the specified network.\n *\n * @param {string} networkId - The network ID.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nNetworks.prototype.getPendingUsers = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getPendingUsers requires networkId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.getPendingUsers, {\n    resource:  this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a pending user from the specified network.\n *\n * @param {string} networkId     - The network ID that the pending user belongs to.\n * @param {string} pendingUserId - The pending user to delete from the network.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nNetworks.prototype.deletePendingUser = function (networkId, pendingUserId) {\n  var url, request;\n\n  if (typeof networkId !== 'string' || typeof pendingUserId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deletePendingUser requires networkId and pendingUserId to be passed as strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.deletePendingUser, {\n    resource: this.config.resource,\n    networkId: networkId,\n    pendingUserId: pendingUserId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\nmodule.exports = Networks;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Networks.js\n// module id = 16\n// module chunks = 0","'use strict';\n\nvar PlaybackContent = require('./PlaybackContent');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Videos Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends PlaybackContent\n */\nfunction Videos (options) {\n  var overrides = {\n    resource: ResourceTypes.VIDEOS,\n    variants: '/<%=resource%>/<%=id%>/variants',\n    publish: '/<%=resource%>/publish'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  PlaybackContent.call(this, options);\n\n};\n\n// This extends the base class of 'PlaybackContent'.\nVideos.prototype = Object.create(PlaybackContent.prototype);\nVideos.prototype.constructor = Videos;\n\n/**\n * Return a list of the requested videos for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nVideos.prototype.getAll = function (headers, status) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Videos.getAll requires a valid status to be passed as a string.');\n    }\n\n    url = url + '?status=' + status;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Get all of the variants for the supplied video id.\n * @param   {string}    id     Video id.\n * @return  {promise}          A promise which resolves when the request is complete.\n */\nVideos.prototype.getVariants = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource getVariants requires a valid video id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.variants, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Publishes a video based on the server time\n *\n * @param  {array}   ids   An array of video ids to publish\n * @return {promise}       A promise which resolves when the request is complete\n */\nVideos.prototype.publish = function (ids) {\n  var request, url;\n\n  // Check to make sure the ids are in an array\n  if (!Array.isArray(ids) || ids.length === 0) {\n    return utils.promisify(false,\n      'IngestSDK Videos publish requires an array of ids to be passed in.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.publish, {\n    resource: this.config.resource,\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: ids\n  });\n\n  return request.send();\n};\n\n/**\n * Gets the total count of videos.\n *\n * @param {string}  status   - [Optional] A comma seperated string of video statuses to filter by.\n * @param {boolean} _private - [Optional] If true, private videos will be included in the response.\n *\n * @return {promise} A promise which resolves when the request is complete.\n */\nVideos.prototype.count = function (status, _private) {\n  var request, url, isStatusSet;\n\n  isStatusSet = false;\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status and it is a string, use it as the status filter.\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Videos count requires a valid status to be passed as a string.');\n    }\n\n    url += '?status=' + status;\n    isStatusSet = true;\n  }\n\n  // If private videos were requested, add the `private` query parameter to the url.\n  if (_private === true) {\n\n    // If a status has been set, then we need to append the next parameter with '&'.\n    if (isStatusSet) {\n      url += '&';\n    } else {\n      url += '?';\n    }\n\n    url += 'private=true';\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n\nmodule.exports = Videos;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Videos.js\n// module id = 17\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Jobs Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Jobs (options) {\n\n  var overrides = {\n    resource: ResourceTypes.JOBS,\n    progress: '/<%=resource%>/<%=id%>/progress'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nJobs.prototype = Object.create(Resource.prototype);\nJobs.prototype.constructor = Jobs;\n\n/**\n * Creates a new encoding job.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nJobs.prototype.add = function (resource) {\n\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Jobs `add` requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send();\n};\n\n/**\n * Gets the progress of a current encoding job\n *\n * @param  {string}  id The id of the job\n * @return {Promise}    A promise which resolves when the request is complete.\n */\nJobs.prototype.progress = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Jobs `progress` requires `jobId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.progress, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'GET'\n  });\n\n  return request.send();\n};\n\nmodule.exports = Jobs;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Jobs.js\n// module id = 18\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Profiles Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Profiles (options) {\n  var overrides = {\n    resource: ResourceTypes.PROFILES\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nProfiles.prototype = Object.create(Resource.prototype);\nProfiles.prototype.constructor = Profiles;\n\n/**\n * Update an existing profile with new content.\n * @param  {object|array} resource  An object or an array of objects representing the profile to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nProfiles.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Profiles update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Profiles;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Profiles.js\n// module id = 19\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Inputs Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Inputs (options) {\n\n  var overrides = {\n    resource: ResourceTypes.INPUTS,\n    allWithFilters: '/<%=resource%>?filter=<%=filterChain%>',\n    searchWithFilters: '/<%=resource%>?search=<%=input%>&filter=<%=filterChain%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nInputs.prototype = Object.create(Resource.prototype);\nInputs.prototype.constructor = Inputs;\n\n/**\n * Return a list of Inputs for the current user and network.\n *\n * @param  {object} headers - Object representing headers to apply to the request.\n * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nInputs.prototype.getAll = function (headers, filters) {\n  var request, url, urlTemplate, tokens;\n\n  tokens = { resource: this.config.resource };\n  urlTemplate = this.config.host + this.config.all;\n\n  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n  if (Array.isArray(filters) && filters.length > 0) {\n    tokens.filterChain = filters.join(',');\n    urlTemplate = this.config.host + this.config.allWithFilters;\n  }\n\n  url = utils.parseTokens(urlTemplate, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a subset of Inputs that match the search terms.\n *\n * @param  {string} input   - The search terms to match against.\n * @param  {object} headers - The headers to be passed to the request.\n * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nInputs.prototype.search = function (input, headers, filters) {\n  var url, request, urlTemplate, tokens;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Inputs search requires search input to be passed as a string.');\n  }\n\n  tokens = { resource: this.config.resource, input: encodeURIComponent(input) };\n  urlTemplate = this.config.host + this.config.search;\n\n  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n  if (Array.isArray(filters) && filters.length > 0) {\n    tokens.filterChain = filters.join(',');\n    urlTemplate = this.config.host + this.config.searchWithFilters;\n  }\n\n  url = utils.parseTokens(urlTemplate, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\nmodule.exports = Inputs;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Inputs.js\n// module id = 20\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Events Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Events (options) {\n  var overrides = {\n    resource: ResourceTypes.EVENTS,\n    types: '/<%=resource%>/types',\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n};\n\n// This extends the base class of 'Resource'.\nEvents.prototype = Object.create(Resource.prototype);\nEvents.prototype.constructor = Events;\n\n/**\n * Returns a list of the requested events for the current network\n *\n * @param {object} headers      - The headers to apply to the request\n * @param {string} filterStatus - A string of all the statuses to filter by, separated by commas\n * @param {string} filterType   - A string of all the types to filter by, separated by commas\n *\n * @return {Promise}\n */\nEvents.prototype.getAll = function (headers, filterStatus, filterType) {\n  var request, url, filterString;\n\n  filterString = '';\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status filter\n  if (filterStatus) {\n    if (typeof filterStatus !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Events.getAll requires a valid filter status to be passed as a string.');\n    }\n\n    filterString = '?filter=' + filterStatus;\n  }\n\n  if (filterType) {\n    if (typeof filterType !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Events.getAll requires a valid filter type to be passed as a string.');\n    }\n\n    if (!filterString) {\n      filterString = '?resource=' + filterType;\n    } else {\n      filterString = filterString + '&resource=' + filterType;\n    }\n  }\n\n  url += filterString;\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a list of all event types\n *\n * @return {Promise}\n */\nEvents.prototype.getTypes = function () {\n  var url, request;\n\n  url = utils.parseTokens(this.config.host + this.config.types, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n  });\n\n  return request.send();\n};\n\nmodule.exports = Events;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Events.js\n// module id = 21\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Roles Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Roles (options) {\n  var overrides = {\n    resource: ResourceTypes.ROLES\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nRoles.prototype = Object.create(Resource.prototype);\nRoles.prototype.constructor = Roles;\n\n/**\n * Update an existing role with new content.\n * @param  {object|array} resource  An object or an array of objects representing the role(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nRoles.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Roles update requires a role to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Roles;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Roles.js\n// module id = 22\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Livestreams Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Livestreams (options) {\n  var overrides = {\n    resource: ResourceTypes.LIVESTREAMS,\n    status: '/<%=resource%>/<%=id%>/status',\n    end: '/<%=resource%>/<%=id%>/stop'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n};\n\n// This extends the base class of 'Resource'.\nLivestreams.prototype = Object.create(Resource.prototype);\nLivestreams.prototype.constructor = Livestreams;\n\n/**\n * Return a list of the requested livestreams for the network.\n *\n * @param {object} headers - Object representing headers to apply to the request.\n * @param {string} status  - The status you wish to get for live streams\n *\n * @return {promise}            A promise which resolves when the request is complete.\n */\nLivestreams.prototype.getAll = function (headers, status) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Livestreams.getAll requires a valid status to be passed as a string.');\n    }\n\n    url = url + '?status=' + status;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a livestreams status\n *\n * @param  {string} id - Livestream id.\n *\n * @return {promise} A promise which resolves when the request is complete.\n */\nLivestreams.prototype.getStatus = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Livestream.getStatus requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.status, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Ends a livestream\n *\n * @param {string} id        - The id of the livestream to end\n * @param {string} streamKey - The streamKey for the livestream you wish to end\n *\n * @return {promise} A promise which resolves when the request is complete.\n */\nLivestreams.prototype.end = function (id, streamKey) {\n  var request, url, data;\n\n  if (typeof id !== 'string' || typeof streamKey !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Livestream.end requires a valid id and stream key passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.end, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  data = {\n    stream_key: streamKey\n  };\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Livestreams;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Livestreams.js\n// module id = 23\n// module chunks = 0"],"sourceRoot":""}